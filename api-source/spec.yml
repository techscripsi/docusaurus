openapi: '3.0.3'
info:
  title: OmniCart API
  version: 1.0.2
  description: |
    This section contains the OmniCart API specification.
servers:
  - url: https://api.omnicart.scripsi.io
paths:
  /refund:
    post:
      summary: Refund
      description: |
        Use this method to refund a previously created and authorized cart or specific items in that cart. You can cancel the whole cart or specify items to cancel using `tags`, `itemIds`, or `timerEnabled` settings.

        Overlaps are ignored, meaning that if you, for example, specify a `tag` and an `itemId` in the same request and the latter `itemId` is marked with the specified `tag`, the request will refund all specified items and will not return an error.
        
        If a cart is refunded partially, the remaining items in that cart can be refunded later.
      responses:
        "200":
          $ref: "#/components/responses/200_refund"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
        "503":
          description: Service Unavailable
      operationId: 50refund
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: " "
              required:
                - cartId
              properties:
                cartId:
                  $ref: "#/components/schemas/primitive_cartId"
                  description: |
                    An existing `cartId`.
                filterBox:
                  $ref: "#/components/schemas/object_filterBox_req"
                debug:
                  $ref: "#/components/schemas/primitive_debug"
      security:
        - ApiKey: []
  /cancel:
    post:
      summary: Cancel
      description: |
        Use this method to cancel a previously created and authorized cart or specific items in that cart. You can cancel the whole cart or specify items to cancel using `tags`, `itemIds`, or `timerEnabled` settings.

        Overlaps are ignored, meaning that if you, for example, specify a `tag` and an `itemId` in the same request and the latter `itemId` is marked with the specified `tag`, the request will cancel all specified items and will not return an error.
        
        If you narrow the request scope using `tags`, `itemIds`, or `timerEnabled`, the remaining cart items will be pending for auto or manual action depending on your settings.
      responses:
        "200":
          $ref: "#/components/responses/200_cancel"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
        "503":
          description: Service Unavailable
      operationId: 20cancel
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: " "
              required:
                - cartId
              properties:
                cartId:
                  $ref: "#/components/schemas/primitive_cartId"
                  description: |
                    An existing `cartId`.
                filterBox:
                  $ref: "#/components/schemas/object_filterBox_req"
                debug:
                  $ref: "#/components/schemas/primitive_debug"
      security:
        - ApiKey: []
  /modify:
    patch:
      summary: Modify
      description: |
        Use this method to modify cart contents or settings. For example, you can change the `quantity` of an item, reduce its authorized `amount`, or adjust timer settings.
      responses:
        "200":
          $ref: "#/components/responses/200_modify"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
        "503":
          description: Service Unavailable
      operationId: 40modify
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - cartId
              properties:
                cartId:
                  $ref: "#/components/schemas/primitive_cartId"
                  description: |
                    An existing `cartId`
                modifyBox:
                  type: object
                  title: " "
                  description: |
                    A set of cart properties to modify.
                  properties:
                    customerId:
                      $ref: "#/components/schemas/primitive_customerId"
                      description: |
                        Unique customer identifier generated on your side and passed with the cart.
                    scope:
                      type: object
                      title: " "
                      description: |
                        The request scope. You can apply changes to the whole cart, per tag, or per item. Child settings override parent ones. That means that the cart settings are overridden by the tag settings which are, in turn, overridden by settings per item.
                      properties:
                        cart:
                          $ref: "#/components/schemas/block_modifyAmountTimer_req"
                          description: |
                            A set of cart settings to modify. The cart settings are overridden by the `tags` or `items` settings.
                        tags:
                          type: array
                          title: " "
                          description: |
                            A set of tag settings to modify per tag. The `tags` settings override the `cart` setting and are overridden by the `items` settings.
                          items:
                            type: object
                            properties:
                              tag:
                                $ref: "#/components/schemas/block_modifyAmountTimer_req"
                                description: |
                                  Replace `tag` with a tag name passed with the cart to modify parameters of the items marked with this tag
                    items:
                      type: array
                      title: " "
                      description: |
                        A set of settings to modify per item. The `items` settings override the `cart` setting and the `tags` settings.
                      items:
                        type: object
                        properties:
                          itemId:
                            type: object
                            title: " "
                            description: |
                              Replace `itemId` with an actual `itemId` value passed with the cart to modify parameters of the corresponding item.
                            properties:
                              tag:
                                $ref: "#/components/schemas/primitive_tag"
                                description: |
                                  asd 20250206104628 FIXME
                              modifyAmount:
                                $ref: "#/components/schemas/object_modifyAmount_modify_item_req"
                              modifyTimer:
                                $ref: "#/components/schemas/object_modifyTimer_modify_req"
                debug:
                  $ref: "#/components/schemas/primitive_debug"
      security:
        - ApiKey: []
  /status/{cartId}:
    get:
      summary: Status 
      description: |
        Use this method to retrieve information for a previously created cart or specific items in that cart. You can narrow down the results using the `tags`, `itemId`, or `timerEnabled` fields.
      responses:
        "200":
          $ref: "#/components/responses/200_status"
        "400":
          $ref: "#/components/responses/400_status"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
        "503":
          description: Service Unavailable
      operationId: 15status
      parameters:
        - name: cartId
          in: path
          required: true
          description: | 
            `cartId` used to initiate your cart.
          schema:
            $ref: "#/components/schemas/primitive_cartId_param_path"
        - name: tags
          in: query
          description: |
            You can use tags that were passed with the cart to retrieve items marked with these tags.
          schema:
            type: array
        - name: itemIds
          in: query
          description: |
            An array of specific item IDs to retrieve.
          schema:
            type: array
        - name: timerEnabled
          in: query
          description: |
            If this property is defined, the results will be narrowed down to items based on their timer settings:
            
            `true` - **only** items that meet other criteria AND with the enabled timer will be returned
            
            `false` - **only** items that meet other criteria AND with the disabled (not set) timer will be returned

            If this property is not defined, the items will be returned regardless of their timer status.
          schema:
            type: boolean
        - name: debug
          in: query
          description: |
            If this property is set to `false`, only one response code and related message weill be returned from OmniCart. In a request is a success, the response will contain the most suitable successful code and message. In case of a failure, the response will contain the first error OmniCart encountered while processing the request.
            
            It this property is set to `true`, the response will return all success or failure codes and messages OmniCart will be able collect regarding the request.
            
            See [Response codes and messages](/docusaurus/docs/api/response-codes) for more details.
          schema:
            $ref: "#/components/schemas/primitive_debug"
      security:
        - ApiKey: []
  /capture:
    post:
      summary: Capture
      description: |
        Use this method to capture a previously created and authorized cart or specific items in that cart. You can capture the whole cart or specify items to cancel using `tags`, `itemIds`, or `timerEnabled` settings.

        Overlaps are ignored, meaning that if you, for example, specify a `tag` and an `itemId` in the same request and the latter `itemId` is marked with the specified `tag`, the request will cancel all specified items and will not return an error.
        
        If you narrow the request scope using `tags`, `itemIds`, or `timerEnabled`, the remaining cart items will be pending for auto or manual action depending on your settings.
      responses:
        "200":
          $ref: "#/components/responses/200_capture"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
        "503":
          description: Service Unavailable
      operationId: 30capture
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: " "
              required:
                - cartId
              properties:
                cartId:
                  $ref: "#/components/schemas/primitive_cartId"
                  description: |
                    An existing `cartId`.
                filterBox:
                  $ref: "#/components/schemas/object_filterBox_req"
                debug:
                  $ref: "#/components/schemas/primitive_debug"
      security:
        - ApiKey: []
  /init:
    post:
      summary: Init
      description: |
        Use this method to initiate a new cart. To do this, generate `cartId` (cart identifier) on your side and pass it to OmniCart along with other parameters.
      responses:
        "201":
          $ref: "#/components/responses/201_init"
        "400":
          $ref: "#/components/responses/400_init"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          description: Service Unavailable
      operationId: 10init
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - cartId
              properties:
                cartId:
                  $ref: "#/components/schemas/primitive_cartId"
                  description: |
                    `cartId` is a unique identifier of your payment order that can contain one or more products (items). Generate `cartId` on your side and pass it to OmniCart on order creation.
                customerId:
                  $ref: "#/components/schemas/primitive_customerId"
                  description: |
                    Optional customer identifier that links them to the passed `cartId`. It is required only if you want to set timers for your items.
                currency:
                  $ref: "#/components/schemas/primitive_currency"
                cartExpiry:
                  $ref: "#/components/schemas/object_invoice"
                scope:
                  $ref: "#/components/schemas/object_scope"
                  description: |
                    `scope` lets you define sets of settings that you can apply to the whole cart or items marked with specific tags. Child settings override parent ones. That means that if you define both cart and tag settings, the tag settings will override cart settins.
                items:
                  $ref: "#/components/schemas/block_cart"
                  description: Cart contents.
                invoice:
                  $ref: "#/components/schemas/object_invoice"
                debug:
                    $ref: "#/components/schemas/primitive_debug"
      parameters: []
      security:
        - ApiKey: []
components:
  schemas:
    primitive_timerTrigger:
      type: string
      title: " "
      enum:
        - initiated
        - rejected
        - canceled
        - authorized
        - captured
        - completed
        - refunded
        - manual
    primitive_timerManualAction:
      type: string
      title: " "
      description: |
        Timer manual action, the following options are available:
        
        `start` - starts a pending timer or unpause a paused timer. Stopped or elapsed timer cannot be (re)started;
        
        `pause` - pauses an active timer. A paused timer can be manually unpaused (started);
        
        `stop` - stops the timer. After the timer is stopped, it cannot be (re)started.
        
        See the [Item Timers](/docs/concepts/timer) section for more details.
      enum:
        - start
        - pause
        - stop
    primitive_timerEnabled:
      type: boolean
      title: " "
    primitive_paymentStatus_full:
      type: string
      title: " "
      enum:
        - initiated
        - rejected
        - canceled
        - authorized
        - captured
        - ongoing
        - completed
        - refunded
    primitive_paymentStatus_empty:
      type: string
      title: " "
    primitive_tag:
      type: string
      title: " "
      example: dungeon
    primitive_autoCaptureAction:
      type: string
      title: " "
      enum:
        - cancel
        - complete
      example: complete
    primitive_amountMode_req:
        type: string
        title: " "
        description: |
          This parameter defines what amount will be used for payment. Available values:
          
          `declared` - for payment will be used the amount specified in the `amount` field of the item. Other fields (`quantity`, `amountModifier`) will be stored by OmniCart but will not affect the price. That is, in this case, the price is calculated on your side and passed to OmniCart as is.
          
          `calculated` - the amount in the `amount` field is provided per item. If you pass the `quantity` and/or `amountModifier` fields along with the `amount` value, OmniCart will calculate the final price based on the latter settings.
        enum:
          - declared
          - calculated
    object_invoice:
      type: object
      title: " "
      description: |
        This object contains data necessary to deliver your invoice to the customer.
      properties:
        deliveryOption:
          $ref: "#/components/schemas/primitive_deliveryOption"
        value:
          $ref: "#/components/schemas/primitive_deliveryOptionValue"
    primitive_debug:
      type: boolean
      title: " "
      description: |
        If this property is set to `false`, only one response code and related message weill be returned from OmniCart. In a request is a success, the response will contain the most suitable successful code and message. In case of a failure, the response will contain the first error OmniCart encountered while processing the request.
        
        It this property is set to `true`, the response will return all success or failure codes and messages OmniCart will be able collect regarding the request.
        
        See [Response codes and messages](/docusaurus/docs/api/response-codes) for more details.
      default: false
      example: false
    primitive_deliveryOption:
      type: string
      title: " "
      description: |
        Invoice delivery option.
      enum:
        - redirect
        - email
        - sms
        - push
      example: redirect
    primitive_deliveryOptionValue:
      type: string
      title: " "
      description: |
        Value for the invoice delivery option depending on `deliveryOption`.
        
        `redirect` - HTTP redirect to the payment page
        
        `email` - email address
        
        `sms` - mobile number
        
        `push` - push token
      example: https://test.com/payment
    primitive_amountMode:
      type: string
      title: " "
      enum:
        - declared
        - calculated
      example: calculated
    array_tags:
      type: array
      title: " "
      example: ["fortress", "necropolis", "dungeon"]
    array_items:
      type: array
      title: " "
      example: ["harpies", "minotaurs", "beholders"]
    primitive_amount_status_res:
        type: integer
        title: " "
        example: 9999
    primitive_amount:
      type: integer
      title: " "
      example: 9999
    primitiveRes_code:
      type: string
      title: " "
    primitiveRes_message:
      type: string
      description: |
        Response message (see [Response codes and messages](/docusaurus/docs/api/response-codes) for more details).
      title: " "
    objectRes_data:
      type: object
      title: " "
    primitive_totalInitiated:
      type: integer
      title: " "
      description: |
        Total initiated amount of the requested items in minimum currency units.
    primitive_totalCaptured:
      type: integer
      title: " "
      description: |
        Total captured amount of the requested items amount in minimum currency units.
    primitive_totalCurrent:
      type: integer
      title: " "
      description: |
        Full cart amount in the current state. 
        
        For example, if the some cart items are `authorized` and partially canceled, their current amount is less than the `initiated` amount. Similarly, if some cart items are `captured` or `completed` and partially refunded, their `current` amount is less that the `captured` amount.

        See the [Amounts](/docs/concepts/concepts/amounts#totalamounts-itemamounts) section for more details.
    primitive_totalRefunded:
      type: integer
      title: " "
      description: |
        Total refunded amount of the requested items amount in minimum currency units.
    primitive_fullInitiatedAmount:
      type: integer
      title: " "
      description: |
        Full initiated amount for the item in minimum currency units.
    primitive_fullCapturedAmount:
      type: integer
      title: " "
      description: |
        Full captured amount for the item in minimum currency units.
    primitive_fullCurrentAmount:
      type: integer
      title: " "
      description: |
        Full item amount in the current state. 
        
        For example, if the item is `authorized` and partially canceled, its current amount is less than the initiated amount. Similarly, if the item is `captured` or `completed` and partially refunded, its current amount is less that the `captured` amount.

        See the [Amounts](/docs/concepts/concepts/amounts#totalamounts-and-itemamounts-objects) section for more details.
    primitive_fullRefundedAmount:
      type: integer
      title: " "
      description: |
        Full captured amount for the item in minimum currency units.
    object_paymentSnapshot_status_res:
      type: object
      title: " "
      properties:
        amount:
          $ref: "#/components/schemas/primitive_amount_status_res"
          description: |
            amount description FIXME
        amountMode:
          $ref: "#/components/schemas/primitive_amountMode"
          description: |
            If `amountMode` is set to `calculated`, this value affects the finale price for the passed item. The item price set in `amount` is multiplied by `amountModifier` and `quantity`. For example, you can use this field to arrange discounts. FIX
        quantity:
          $ref: "#/components/schemas/primitive_quantity_status_res"
          description: |
            FIXME
          example: 1
        amountModifier:
          $ref: "#/components/schemas/primitive_amountModifier_status_res"
          description: |
            FIXME
          example: 1
    primitive_triggerEvent:
      type: string
      title: " "
      nullable: true
      description: |
        Item payment status that triggers the timer.
        
        If you pass the `null` value, will have to be started manually. See the [Item Timers](/docs/concepts/timer) section for more information.
      enum:
        - initiated
        - rejected
        - authorized
        - canceled
        - captured
        - completed
        - refunded
    object_timerSnapshot_status_res:
      type: object
      title: " "
      properties:
        triggerEvent:
          $ref: "#/components/schemas/primitive_paymentStatus_empty"
          enum:
            - initiated
            - canceled
            - rejected
            - authorized
            - captured
            - completed
            - refunded
            - manual
        timerStatus:
          $ref: "#/components/schemas/primitive_timerStatus"
        remainingSecs:
          $ref: "#/components/schemas/primitive_timerValue"          
    object_modifyAmount_modify_req:
      type: object
      title: " "
      description: |
        A set of parameters to modify amounts.

        Captured amount must not exceed authorized amount.
      properties:
        amountMode:
          $ref: "#/components/schemas/primitive_amountMode"
        amountModifier:
          $ref: "#/components/schemas/primitive_amountModifier"
    object_modifyAmount_modify_item_req:
      type: object
      title: " "
      description: |
        A set of settings to modify the resulting amount. The resulting amount cannot exceed the authorized amount. See the [Modifying Items](/docs/concepts/modify) section for more information.
      properties:
        amount:
          $ref: "#/components/schemas/primitive_amount"
          description: |
            Item amount in minimum currency units.
            
            `amountMode: declared` - the `amount` value passed to OmniCart is the total amount for this `itemId` in the cart. The `quantity` and `amountModifier` values are stored in OmniCart but ignored for final item price calculation.
            
            `amountMode: calculated` - the `amount` value is specified per item. The total amount is calculated on the OmniCart side based on the `quantity` and `amountModifier` values.
        amountMode:
          $ref: "#/components/schemas/primitive_amountMode_req"
        quantity:
          $ref: "#/components/schemas/primitive_quantity"
        amountModifier:
          $ref: "#/components/schemas/primitive_amountModifier"
          description: |
            asd 20250206104650 FIXME
    object_filterBox_req:
      type: object
      title: " "
      description: |
        Block of settings to specify the request scope.
      properties:
        tags:
          $ref: "#/components/schemas/array_tags"
          description: |
            List of tags used in a cart. All items marked with the specified tags will be affected by the request.
        itemIds:
          $ref: "#/components/schemas/array_items"
          description: |
            Specific `itemIds` passed that are part of a cart. All specified items will be affected by the request.
        timerEnabled:
          $ref: "#/components/schemas/primitive_timerEnabled"
          description: |
            If this property is defined, the results will be narrowed down to items based on their timer settings:
            
            `true` - **only** items that meet other criteria AND with the enabled timer will be returned
            
            `false` - **only** items that meet other criteria AND with the disabled (not set) timer will be returned

            If this property is not defined, the items will be returned regardless of their timer status.
          example: false
    object_amountInfo_status_res:
      type: object
      title: " "
      description: |
        This object contains information on the amounts per certain statuses of the item at the time of the request.
        object_amountInfo_status_res.
      properties:
        initiated:
          $ref: "#/components/schemas/primitive_fullInitiatedAmount"
        captured:
          $ref: "#/components/schemas/primitive_fullCapturedAmount"
        refunded:
          $ref: "#/components/schemas/primitive_fullRefundedAmount"
        current:
          $ref: "#/components/schemas/primitive_fullCurrentAmount"
    primitiveRes_timestamp:
      type: string
      title: " "
      format: date-time
      description: | 
        Date and time the request was received by the server.
      example: "2025-04-23T18:25:43.511Z"
    block_cart:
      type: array
      items:
        type: object
        required:
          - itemId
        properties:
          itemId:
            $ref: "#/components/schemas/object_item_init_req"
    primitive_timerStatus:
      type: string
      title: ""
      enum:
        - pending
        - started
        - paused
        - stopped
        - elapsed
    object_tags:
      type: array
      title: " "
      description: Array of item tags with their specific settings.
      items:
        type: object
        properties:
          tag:
            type: object
            title: " "
            description: |
              Replace `tag` with a tag name defined in your merchant dashboard.
            properties:
              paymentBox:
                $ref: "#/components/schemas/object_paymentBox"
                description: |
                  Payment and timer settings applied to the tag specified as object name. Tag settings override cart settings.
              enableTimer:
                $ref: "#/components/schemas/primitive_timerEnabled"
                description: |
                  Enable/disable timer:
                          
                  `true` - the timer is enabled, you can configure its settings
                
                  `false` - the timer is disabled.
              timer:
                $ref: "#/components/schemas/object_timerSettings"
                description: Timer settings.
    array_debug:
      type: array
      title: " "
      items:
        type: object
        required:
          - code
          - message
        properties:
          code:
            $ref: "#/components/schemas/primitiveRes_code"
            description: |
              Response code (see [Response codes and messages](/docusaurus/docs/api/response-codes#status) for more details).
          message: 
            $ref: "#/components/schemas/primitiveRes_message"
    object_item_status_res:
      type: object
      title: " "
    object_item_init_req:
      type: object
      required:
        - amount
      properties:
        tag:
          $ref: "#/components/schemas/primitive_tag"
          description: |
            Specify an optional tag. The tag must be defined in your merchant dashboard. One tag per cart item is allowed.
        amount:
          $ref: "#/components/schemas/primitive_amount"
          description: |
            Item amount in minimum currency units.
            
            `amountMode: declared` - the `amount` value passed to OmniCart is the total amount for this `itemId` in the cart. The `quantity` and `amountModifier` values are stored in OmniCart but ignored for final item price calculation.
            
            `amountMode: calculated` - the `amount` value is specified per item. The total amount is calculated on the OmniCart side based on the `quantity` and `amountModifier` values.
        quantity:
          $ref: "#/components/schemas/primitive_quantity"
          description: |
            Item quantity. Can be a floating point (for example, litres of milk). Depending on the `amountMode` setting can be processed by OmniCart.
            `amountMode: declared` - the `quantity` value is ignored for the final price calculation and stored in OmniCart.
            `amountMode: calculated` -  the final price is calculated by multiplying `amount` by `quantity` on the OmniCart side.
        paymentBox:
          $ref: "#/components/schemas/object_paymentBox"
      description: Replace `itemId` with an actual item ID available in your merchant dashboard.
    object_scope:
      type: object
      properties:
        cart:
          type: object
          properties:
            paymentBox:
              $ref: "#/components/schemas/object_paymentBox"
              description: |
                Payment and timer settings applied to the whole cart. If you define the tag settings, they will override the cart settings for items marked with the defined tags.
            enableTimer:
              $ref: "#/components/schemas/primitive_timerEnabled"
              description: |
                Enable/disable timer:
                               
                `true` - the timer is enabled, you can configure its settings
                        
                `false` - the timer is disabled.
            timer:
              $ref: "#/components/schemas/object_timerSettings"
              description: Timer settings.
        tags:
          $ref: "#/components/schemas/object_tags"
          description: |
            Payment and timer settings for item tags. Each object in this array represents a tag.
    object_timerSettings:
      type: object
      title: " "
      properties:
        triggerEvent:
          $ref: "#/components/schemas/primitive_paymentStatus_empty"
          description: |
            Item payment status that triggers the timer. You can also select to start the timer manually. LINK
          enum:
            - initiated
            - rejected
            - authorized
            - canceled
            - captured
            - completed
            - refunded
            - manual
        value:
          $ref: "#/components/schemas/primitive_timerValue"
          description: |
            Amount of seconds after which the timer elapses.
    object_captureSettings:
      type: object
      title: " "
      properties:
        autoAction:
          $ref: "#/components/schemas/primitive_autoCaptureAction"
          description: |
            Action that is taken after the time set in the `value` parameter elapses.
        value:
          $ref: "#/components/schemas/primitive_timerValue"
          description: |
            Amount of seconds after which the action set in `autoAction` is taken.
          example: 172800
          minimum: 600
      description: Capture settings.
    primitive_cartExpiry:
        type: number
        title: " "
        example: 7200
        description: |
          Checkout session expiry time in seconds. After the checkout session times out, the customer will not be able to complete the payment and all cart items will change their status to `expired`.

          The default value of this property as well as the privilege to change it depends on your agreement with OmniCart. SNIPPET

          **It is not recommended to change this value  even if you have enough permissions.**
    primitive_currency:
      type: string
      title: " "
      example: USD
      description: |
        "[ISO 4217](https://www.iban.com/currency-codes) alphabetic currency code."
    primitive_quantity_status_res:
        type: number
        title: " "
        format: float
        minimum: 0.01
    primitive_quantity:
      type: number
      title: " "
      format: float
      minimum: 0.01
      description: | 
        The quantity of an item. Can be a whole number or a decimal fraction.
        If `amountMode` is set to `calculated`, the `amount` value is multiplied by the `quantity` value on the OmniCart side.
        If `amountMode` is set to declared, the `quantity` value is stored in OmniCart but does not affect the resulting item price.
    primitive_itemId:
      type: string
      title: " "
    primitive_capture:
      type: boolean
      title: " "
    block_modifyAmountTimer_req:
      type: object
      title: " "
      description: block_modifyAmountTimer_req description
      properties:
        modifyAmount:
          $ref: "#/components/schemas/object_modifyAmount_modify_req"
        modifyTimer:
          $ref: "#/components/schemas/object_modifyTimer_modify_req"
    object_totalAmounts_status_res:
      type: object
      properties:
        initiated:
          $ref: "#/components/schemas/primitive_totalInitiated"
        captured:
          $ref: "#/components/schemas/primitive_totalCaptured"
        refunded:
          $ref: "#/components/schemas/primitive_totalRefunded"
        current:
          $ref: "#/components/schemas/primitive_totalCurrent"
    object_modifyTimer_modify_req:
      type: object
      title: " "
      description: |
        A set of timer parameters.
      properties:
        triggerEvent:
          $ref: "#/components/schemas/primitive_triggerEvent"
        manualAction:
          $ref: "#/components/schemas/primitive_timerManualAction"
        timerValue:
          $ref: "#/components/schemas/primitive_timerValue_req"
    object_paymentBox:
      type: object
      title: " "
      description: |
        Set of payment and timer settings.
      properties:
        amountMode:
          $ref: "#/components/schemas/primitive_amountMode_req"
        amountModifier:
          $ref: "#/components/schemas/primitive_amountModifier"
          description: |
            If `amountMode` is set to `calculated`, this value affects the finale price for the passed item. The item price set in `amount` is multiplied by `amountModifier` and `quantity`. For example, you can use this field to arrange discounts. FIXME duplicated description
        capture:
          $ref: "#/components/schemas/primitive_capture"
          description: |
            Whether it is required to capture a payment after it is authorized (after the customer verified their payment) to complete a purchase.

            `true` - after a cart is authorized, manual capture is required (with enough permission, you can configure auto capture as well);

            `false` - after a cart is authorized, it is captured instantly.
        captureSettings:
          $ref: "#/components/schemas/object_captureSettings"
          description: Capture settings. By default, an authorized payment is auto canceled after 2 days (2880 minutes) without manual action.
    primitive_timerValue_req:
      type: integer
      title: " "
      description: |
        Lets you redefine current remaining timer value in seconds. `0` value means that the timer is infinite - you can use it for one time purchases.
    primitive_timerValue:
      type: integer
      title: " "
    primitive_amountModifier_status_res:
        type: number
        title: " "
        format: float
        minimum: 0.01
        example: 0.7
    primitive_amountModifier:
      type: number
      title: " "
      format: float
      minimum: 0.01
      example: 0.7
      description: |
        If `amountMode` is set to `calculated`, the `amountModifier` value acts as a multiplier for the total item `amount`. Here is an example.
        
        Consider an item that costs 100 USD. However, there is a time-limited 30% discount or the customer has a personal 30% discount. For this item, the `amountModifier` value should be set to `0.7` (as it is 70% of the original price).
        
        If `amountMode` is set to `declared`, the `amountModifier` value will be stored in OmniCart but will not affect the resulting item price. LINK
    primitive_customerId:
      type: string
      title: " "
      example: 8d7d8181-b4bf-49bb-b732-d498d15dc5cc
    primitive_cartId:
      type: string
      title: " "
      example: 6f891edb-1e1f-48bb-b042-2cb790a0f402
      minimum: 9
      maximum: 36
    primitive_cartId_param_path:
        type: string
        title: " "
        minimum: 9
        maximum: 36
  responses:
    "200_status":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
                description: Response parameters.
                properties:
                  cartId:
                    $ref: "#/components/schemas/primitive_cartId"
                  customerId:
                    $ref: "#/components/schemas/primitive_customerId"
                  currency:
                    $ref: "#/components/schemas/primitive_currency"
                  totalAmounts:
                    $ref: "#/components/schemas/object_totalAmounts_status_res"
                  items:
                    type: array
                    items:
                      type: object
                      title: " "
                      properties:
                          itemId:
                            type: object
                            title: " "
                            properties:
                              paymentStatus:
                                $ref: "#/components/schemas/primitive_paymentStatus_full"
                              itemAmounts:
                                $ref: "#/components/schemas/object_amountInfo_status_res"
                              tag:
                                $ref: "#/components/schemas/primitive_tag"
                              paymentSnapshot:
                                $ref: "#/components/schemas/object_paymentSnapshot_status_res"
                              timerSnapshot:
                                $ref: "#/components/schemas/object_timerSnapshot_status_res"
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                description: |
                  Response code (see [Response codes and messages](/docusaurus/docs/api/response-codes#status) for more details).
                example: "001004"
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                description: |
                  Response code (see [Response codes and messages](/docusaurus/docs/api/response-codes#status) for more details).
                example: Requested cart does not contain tag(s) [...]
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "201_init":
      description: Cart created
      content:
        application/json:
          schema:
            type: object
            required:
              - cartId
              - code
              - message
              - timestamp
            properties:
              cartId:
                $ref: "#/components/schemas/primitive_cartId"
                description: |
                  Cart identifier generated on your side and passed to OmniCart on card registration.
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                description: |
                  Response code (see [Response codes and messages](/docusaurus/docs/api/response-codes#init) for more details).
                example: "000000"
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                description: |
                  Response code (see [Response codes and messages](/docusaurus/docs/api/response-codes#init) for more details).
                example: Success
              debug:
                $ref: "#/components/schemas/array_debug"
                description: |
                  An array of the request related codes and their corresponding messages. See the [Sandbox & Debugging](/docs/concepts/debugging) page for more information.
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "200_modify":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
                description: Response parameters.
                properties:
                  modifiedAmounts:
                    type: array
                    title: " "
                    description: Array of itemIds with modified amount
                    example: ["itemId1", "itemId2", "itemId3"]
                  modifiedTimers:
                    type: array
                    title: " "
                    description: Array of itemIds with modified timer
                    example: ["itemId1", "itemId2", "itemId3"]
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                description: |
                  Response code (see [Response codes and messages](/docusaurus/docs/api/response-codes#modify) for more details).
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                description: |
                  Response code (see [Response codes and messages](/docusaurus/docs/api/response-codes#modify) for more details).
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "200_capture":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
                properties:
                  itemIds:
                    $ref: "#/components/schemas/array_items"
                    description: Array of captured itemIds.
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                description: |
                  Response code (see [Response codes and messages](/docusaurus/docs/api/response-codes#capture) for more details).
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                description: |
                  Response code (see [Response codes and messages](/docusaurus/docs/api/response-codes#capture) for more details).
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "200_cancel":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
                properties:
                  itemIds:
                    $ref: "#/components/schemas/array_items"
                    description: Array of itemIds with canceled payment.
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                description: |
                  Response code (see [Response codes and messages](/docusaurus/docs/api/response-codes#cancel) for more details).
              message:
                $ref: "#/components/schemas/primitiveRes_message"                
                description: |
                  Response code (see [Response codes and messages](/docusaurus/docs/api/response-codes#cancel) for more details).
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "200_refund":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
                properties:
                  itemIds:
                    $ref: "#/components/schemas/array_items"
                    description: Array of refunded itemIds.
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                description: |
                  Response code (see [Response codes and messages](/docusaurus/docs/api/response-codes#refund) for more details).
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                description: |
                  Response code (see [Response codes and messages](/docusaurus/docs/api/response-codes#refund) for more details).
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "200":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
              code:
                $ref: "#/components/schemas/primitiveRes_code"
              message:
                $ref: "#/components/schemas/primitiveRes_message"
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "404":
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                example: 199001
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                example: Endpoint not found
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "400_init":
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                example: 123000
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                example: Unknown currency
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "400":
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              code:
                $ref: "#/components/schemas/primitiveRes_code"
              message:
                $ref: "#/components/schemas/primitiveRes_message"
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "400_status":
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                example: 121001
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                example: cartId cannot be empty
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                example: 111000
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                example: Authentication error
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "500":
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              code:
                type: number
                title: " "
                description: |
                  Error code (see [Response codes and messages](/docusaurus/docs/api/response-codes) for more details).
                example: 199000
              message:
                type: string
                title: " "
                description: |
                  Error message (see [Response codes and messages](/docusaurus/docs/api/response-codes) for more details).
                example: General system error
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
#      "503":
#        description: Service Unavailable
  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: Api-Access-Token
      description: "Key Auth: Requests contain a valid `API_KEY` in the request headers."