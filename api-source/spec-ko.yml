openapi: '3.0.3'
info:
  title: OmniCart API
  version: 1.0.2
  description: |
    이 섹션에는 OmniCart API 사양이 포함되어 있습니다.
servers:
  - url: https://api.omnicart.scripsi.io
paths:
  /refund:
    post:
      summary: Refund
      description: |
        이 방법을 사용하여 이전에 생성되고 승인된 카트 또는 해당 카트의 특정 품목을 환불합니다. 전체 장바구니를 취소하거나 를 사용하여 취소할 항목을 지정할 수 있습니다 `tags`, `itemIds`또는 `timerEnabled` 설정.

        중복은 무시되며, 예를 들어 `tag` 그리고 `itemId` 동일한 요청과 후자에서 `itemId` 지정된 것으로 표시됩니다. `tag`, 요청은 지정된 모든 항목을 환불하고 오류를 반환하지 않습니다.
        
        카트가 부분적으로 환불되는 경우 해당 카트의 나머지 항목은 나중에 환불될 수 있습니다.
      responses:
        "200":
          $ref: "#/components/responses/200_refund"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
        "503":
          description: Service Unavailable
      operationId: refund
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: " "
              required:
                - cartId
              properties:
                cartId:
                  $ref: "#/components/schemas/primitive_cartId"
                  description: |
                    기존 `cartId`.
                filterBox:
                  $ref: "#/components/schemas/object_filterBox_req"
                debug:
                  $ref: "#/components/schemas/primitive_debug"
      security:
        - ApiKey: []
  /cancel:
    post:
      summary: Cancel
      description: |
        이 방법을 사용하여 이전에 생성되고 승인된 카트 또는 해당 카트의 특정 항목을 취소할 수 있습니다. 전체 장바구니를 취소하거나 를 사용하여 취소할 항목을 지정할 수 있습니다 `tags`, `itemIds`또는 `timerEnabled` 설정.

        중복은 무시되며, 예를 들어 `tag` 그리고 `itemId` 동일한 요청과 후자에서 `itemId` 지정된 것으로 표시됩니다. `tag`, 요청은 지정된 모든 항목을 취소하고 오류를 반환하지 않습니다.
        
        를 사용하여 요청 범위를 좁히는 경우 `tags`, `itemIds`또는 `timerEnabled`, 나머지 장바구니 항목은 설정에 따라 자동 또는 수동 작업을 위해 보류 중입니다.
      responses:
        "200":
          $ref: "#/components/responses/200_cancel"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
        "503":
          description: Service Unavailable
      operationId: cancel
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: " "
              required:
                - cartId
              properties:
                cartId:
                  $ref: "#/components/schemas/primitive_cartId"
                  description: |
                    기존 `cartId`.
                filterBox:
                  $ref: "#/components/schemas/object_filterBox_req"
                debug:
                  $ref: "#/components/schemas/primitive_debug"
      security:
        - ApiKey: []
  /modify:
    patch:
      summary: Modify
      description: |
        이 방법을 사용하여 카트 내용 또는 설정을 수정할 수 있습니다. 예를 들어 다음을 변경할 수 있습니다. `quantity` 항목의, 승인 된 감소 `amount`, 또는 타이머 설정을 조정합니다.
      responses:
        "200":
          $ref: "#/components/responses/200_modify"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
        "503":
          description: Service Unavailable
      operationId: modify
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - cartId
              properties:
                cartId:
                  $ref: "#/components/schemas/primitive_cartId"
                  description: |
                    기존 `cartId`
                modifyBox:
                  type: object
                  title: " "
                  description: |
                    수정할 카트 속성 집합입니다.
                  properties:
                    customerId:
                      $ref: "#/components/schemas/primitive_customerId"
                      description: |
                        사용자 측에서 생성되어 장바구니와 함께 전달된 고유한 고객 식별자입니다.
                    scope:
                      type: object
                      title: " "
                      description: |
                        요청 범위입니다. 전체 카트, 태그별 또는 항목별로 변경 사항을 적용할 수 있습니다. 자식 설정은 부모 설정보다 우선합니다. 즉, 장바구니 설정이 태그 설정에 의해 재정의되고, 태그 설정은 항목별 설정에 의해 재정의됩니다.
                      properties:
                        cart:
                          $ref: "#/components/schemas/block_modifyAmountTimer_req"
                          description: |
                            수정할 카트 설정 집합입니다. 장바구니 설정은 `tags` 또는 `items` 설정.
                        tags:
                          type: array
                          title: " "
                          description: |
                            태그별로 수정할 태그 설정 집합입니다. 이 `tags` 설정은 `cart` 설정되고 `items` 설정.
                          items:
                            type: object
                            properties:
                              tag:
                                $ref: "#/components/schemas/block_modifyAmountTimer_req"
                                description: |
                                  갈다 `tag` 이 태그로 표시된 항목의 매개 변수를 수정하기 위해 장바구니와 함께 전달된 태그 이름
                    items:
                      type: array
                      title: " "
                      description: |
                        항목별로 수정할 설정 집합입니다. 이 `items` 설정은 `cart` 설정 및 `tags` 설정.
                      items:
                        type: object
                        properties:
                          itemId:
                            type: object
                            title: " "
                            description: |
                              갈다 `itemId` 실제 `itemId` 해당 항목의 매개 변수를 수정하기 위해 카트와 함께 전달된 값입니다.
                            properties:
                              tag:
                                $ref: "#/components/schemas/primitive_tag"
                                description: |
                                  항목이 표시된 태그입니다.
                              modifyAmount:
                                $ref: "#/components/schemas/object_modifyAmount_modify_item_req"
                              modifyTimer:
                                $ref: "#/components/schemas/object_modifyTimer_modify_req"
                debug:
                  $ref: "#/components/schemas/primitive_debug"
      security:
        - ApiKey: []
  /status/{cartId}:
    get:
      summary: Status 
      description: |
        이 메서드를 사용하여 이전에 만든 카트 또는 해당 카트의 특정 항목에 대한 정보를 검색할 수 있습니다. 를 사용하여 결과 범위를 좁힐 수 있습니다. `tags`, `itemId`또는 `timerEnabled` 필드.
      responses:
        "200":
          $ref: "#/components/responses/200_status"
        "400":
          $ref: "#/components/responses/400_status"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
        "503":
          description: Service Unavailable
      operationId: status
      parameters:
        - name: cartId
          in: path
          required: true
          description: | 
            `cartId` 장바구니를 시작하는 데 사용됩니다.
          schema:
            $ref: "#/components/schemas/primitive_cartId_param_path"
        - name: tags
          in: query
          description: |
            카트와 함께 전달된 태그를 사용하여 이러한 태그로 표시된 항목을 검색할 수 있습니다.
          schema:
            type: array
        - name: itemIds
          in: query
          description: |
            검색할 특정 항목 ID의 배열입니다.
          schema:
            type: array
        - name: timerEnabled
          in: query
          description: |
            이 속성이 정의되면 결과는 타이머 설정에 따라 다음 항목으로 좁혀집니다:
            
            `true` - 다른 기준을 충족하고 타이머가 활성화된 **항목만** 반환됩니다.
            
            `false` - 다른 기준을 충족하고 타이머가 비활성화된(설정되지 않음) **항목만** 반환됩니다.

            이 속성을 정의하지 않으면 타이머 상태에 관계없이 항목이 반환됩니다.
          schema:
            type: boolean
        - name: debug
          in: query
          description: |
            이 속성이 `false`, OmniCart에서 하나의 응답 코드 및 관련 메시지만 반환됩니다. 요청이 성공하면 응답에는 가장 적합한 성공 코드와 메시지가 포함됩니다. 실패의 경우 응답에는 요청을 처리하는 동안 발생한 첫 번째 오류 OmniCart가 포함됩니다.
            
            이 속성이 `true`, 응답은 모든 성공 또는 실패 코드와 OmniCart가 요청과 관련하여 수집 할 수있는 메시지를 반환합니다.
            
            보다 [테스팅 및 디버깅](./test-debug) 자세한 내용은.
          schema:
            $ref: "#/components/schemas/primitive_debug"
      security:
        - ApiKey: []
  /capture:
    post:
      summary: Capture
      description: |
        이 방법을 사용하여 이전에 생성되고 승인된 카트 또는 해당 카트의 특정 항목을 캡처합니다. 전체 장바구니를 캡처하거나 를 사용하여 취소할 항목을 지정할 수 있습니다 `tags`, `itemIds`또는 `timerEnabled` 설정.

        중복은 무시되며, 예를 들어 `tag` 그리고 `itemId` 동일한 요청과 후자에서 `itemId` 지정된 것으로 표시됩니다. `tag`, 요청은 지정된 모든 항목을 취소하고 오류를 반환하지 않습니다.
        
        를 사용하여 요청 범위를 좁히는 경우 `tags`, `itemIds`또는 `timerEnabled`, 나머지 장바구니 항목은 설정에 따라 자동 또는 수동 작업을 위해 보류 중입니다.
      responses:
        "200":
          $ref: "#/components/responses/200_capture"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
        "503":
          description: Service Unavailable
      operationId: capture
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: " "
              required:
                - cartId
              properties:
                cartId:
                  $ref: "#/components/schemas/primitive_cartId"
                  description: |
                    기존 `cartId`.
                filterBox:
                  $ref: "#/components/schemas/object_filterBox_req"
                debug:
                  $ref: "#/components/schemas/primitive_debug"
      security:
        - ApiKey: []
  /init:
    post:
      summary: Init
      description: |
        이 방법을 사용하여 새 카트를 시작합니다. 이렇게 하려면 `cartId` (cart identifier) 다른 매개 변수와 함께 OmniCart에 전달하십시오.
      responses:
        "201":
          $ref: "#/components/responses/201_init"
        "400":
          $ref: "#/components/responses/400_init"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          description: Service Unavailable
      operationId: init
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - cartId
                - paymentForm
              properties:
                cartId:
                  $ref: "#/components/schemas/primitive_cartId"
                  description: |
                    `cartId`는 하나 이상의 제품(아이템)을 포함할 수 있는 결제 주문의 고유 식별자입니다. 귀하 측에서 `cartId`를 생성하여 주문 생성 시 OmniCart에 전달합니다.
                customerId:
                  $ref: "#/components/schemas/primitive_customerId"
                  description: |
                    전달된 고객 식별자에 연결하는 선택적 고객 식별자 `cartId`. 항목에 대한 타이머를 설정하려는 경우에만 필요합니다.
                currency:
                  $ref: "#/components/schemas/primitive_currency"
                cartExpiry:
                  $ref: "#/components/schemas/primitive_cartExpiry"
                scope:
                  $ref: "#/components/schemas/object_scope"
                  description: |
                    `scope` 전체 카트 또는 특정 태그로 표시된 항목에 적용할 수 있는 설정 집합을 정의할 수 있습니다. 자식 설정은 부모 설정보다 우선합니다. 즉, 카트 설정과 태그 설정을 모두 정의하면 태그 설정이 카트 설정을 재정의합니다.
                items:
                  $ref: "#/components/schemas/block_cart"
                  description: 장바구니 내용.
                paymentForm:
                  $ref: "#/components/schemas/object_paymentForm"
                debug:
                    $ref: "#/components/schemas/primitive_debug"
      parameters: []
      security:
        - ApiKey: []
components:
  schemas:
    primitive_timerTrigger:
      type: string
      title: " "
      enum:
        - initiated
        - rejected
        - canceled
        - authorized
        - captured
        - completed
        - refunded
        - manual
    primitive_timerManualAction:
      type: string
      title: " "
      description: |
        타이머 수동 동작, 다음과 같은 옵션을 사용할 수 있습니다:
        
        `start` - 보류 중인 타이머를 시작하거나 일시 중지된 타이머를 일시 중지 해제합니다. 중지되거나 경과된 타이머는 다음과 같을 수 없습니다. (re)시작;
        
        `pause` - 활성 타이머를 일시 중지합니다. 일시 중지된 타이머는 수동으로 일시 중지를 해제할 수 있습니다. (started);
        
        `stop` - 타이머를 중지합니다. 타이머가 중지된 후에는 사용할 수 없습니다. (re)시작.
        
        자세한 내용은 다음을 참조하십시오. [아이템 타이머](../concepts/timer) 섹션을 참조하십시오.
      enum:
        - start
        - pause
        - stop
    primitive_timerEnabled:
      type: boolean
      title: " "
    primitive_paymentStatus_full:
      type: string
      title: " "
      enum:
        - initiated
        - rejected
        - canceled
        - authorized
        - captured
        - ongoing
        - completed
        - refunded
    primitive_paymentStatus_empty:
      type: string
      title: " "
    primitive_tag:
      type: string
      title: " "
      example: dungeon
    primitive_autoCaptureAction:
      type: string
      title: " "
      enum:
        - cancel
        - complete
      example: complete
    primitive_amountMode_req:
        type: string
        title: " "
        description: |
          이 매개변수는 지불에 사용될 금액을 정의합니다. 사용 가능한 값:
          
          `declared` - 지불을 위해 에 명시된 금액이 사용됩니다. `amount` 항목의 필드입니다. 다른 분야 (`quantity`, `amountModifier`) OmniCart에 의해 저장되지만 가격에는 영향을 미치지 않습니다. 즉, 이 경우 가격은 사용자 측에서 계산되어 그대로 OmniCart에 전달됩니다.
          
          `calculated` - 의 금액 `amount` 필드는 항목별로 제공됩니다. 만약 당신이 통과하면 `quantity` 및/또는 `amountModifier` 필드와 함께 `amount` 값, OmniCart는 후자의 설정을 기반으로 최종 가격을 계산합니다.
        enum:
          - declared
          - calculated
    object_paymentForm:
      type: object
      title: " "
      required:
        - deliveryOption
        - value
      description: |
        이 개체에는 결제 양식을 고객에게 전달하는 데 필요한 데이터가 포함되어 있습니다.
      properties:
        deliveryOption:
          $ref: "#/components/schemas/primitive_deliveryOption"
        value:
          $ref: "#/components/schemas/primitive_deliveryOptionValue"
    primitive_debug:
      type: boolean
      title: " "
      description: |
        이 속성이 `false`, OmniCart에서 하나의 응답 코드 및 관련 메시지만 반환됩니다. 요청이 성공하면 응답에는 가장 적합한 성공 코드와 메시지가 포함됩니다. 실패의 경우 응답에는 요청을 처리하는 동안 발생한 첫 번째 오류 OmniCart가 포함됩니다.
        
        이 속성이 `true`, 응답은 모든 성공 또는 실패 코드와 OmniCart가 요청과 관련하여 수집 할 수있는 메시지를 반환합니다.
        
        보다 [응답 코드 및 메시지](./response-codes) 자세한 내용은.
      default: false
      example: false
    primitive_deliveryOption:
      type: string
      title: " "
      description: |
        지불 양식 배달 옵션.
      enum:
        - redirect
        - email
        - sms
        - push
      example: redirect
    primitive_deliveryOptionValue:
      type: string
      title: " "
      description: |
        다음에 따라 제공되는 결제 양식 배달 옵션 의 값 `deliveryOption`.
        
        `redirect` - HTTP가 결제 페이지로 리디렉션됩니다.
        
        `email` - 이메일 주소
        
        `sms` - 휴대폰 번호
        
        `push` - 푸시 토큰
      example: https://test.com/payment
    primitive_amountMode:
      type: string
      title: " "
      enum:
        - declared
        - calculated
      example: calculated
    array_tags:
      type: array
      title: " "
      example: ["fortress", "necropolis", "dungeon"]
    array_items:
      type: array
      title: " "
      example: ["harpies", "minotaurs", "beholders"]
    primitive_amount_status_res:
        type: integer
        title: " "
        example: 1100
    primitive_amount:
      type: integer
      title: " "
      example: 1100
    primitiveRes_code:
      type: string
      title: " "
    primitiveRes_code_succes:
      type: string
      title: " "
      example: "000000"
    primitiveRes_message:
      type: string
      title: " "
    primitiveRes_message_success:
      type: string
      title: " "
      example: "Success"
    objectRes_data:
      type: object
      title: " "
    primitive_totalInitiated:
      type: integer
      title: " "
      description: |
        요청된 항목의 총 시작 금액(최소 통화 단위)입니다.
    primitive_totalCaptured:
      type: integer
      title: " "
      description: |
        요청된 항목 금액의 총 캡처된 금액(최소 통화 단위)입니다.
    primitive_totalCurrent:
      type: integer
      title: " "
      description: |
        현재 상태의 전체 장바구니 금액입니다. 
        
        예를 들어, 일부 장바구니 항목이 다음과 같은 경우 `authorized` 부분적으로 취소된 경우 현재 금액이 `initiated` 분량. 마찬가지로 일부 장바구니 항목이 `captured` 또는 `completed` 부분적으로 환불된 `current` amount가 보다 작습니다. `captured` 분량.

        자세한 내용은 다음을 참조하십시오. [금액](../concepts/concepts/amounts#totalamounts-itemamounts) 섹션을 참조하십시오.
    primitive_totalRefunded:
      type: integer
      title: " "
      description: |
        요청된 항목의 총 환불 금액은 최소 통화 단위입니다.
    primitive_fullInitiatedAmount:
      type: integer
      title: " "
      description: |
        항목에 대한 전체 시작 금액(최소 통화 단위)입니다.
    primitive_fullCapturedAmount:
      type: integer
      title: " "
      description: |
        항목에 대해 캡처된 전체 금액(최소 통화 단위)입니다.
    primitive_fullCurrentAmount:
      type: integer
      title: " "
      description: |
        현재 상태의 전체 항목 금액입니다. 
        
        예를 들어 항목이 `authorized` 부분적으로 취소된 경우 현재 금액이 시작된 금액보다 적습니다. 마찬가지로 항목이 `captured` 또는 `completed` 부분적으로 환불된 경우 현재 금액은 `captured` 분량.

        자세한 내용은 다음을 참조하십시오. [금액](../concepts/concepts/amounts#totalamounts-and-itemamounts-objects) 섹션을 참조하십시오.
    primitive_fullRefundedAmount:
      type: integer
      title: " "
      description: |
        항목에 대해 캡처된 전체 금액(최소 통화 단위)입니다.
    object_paymentSnapshot_status_res:
      type: object
      title: " "
      properties:
        amount:
          $ref: "#/components/schemas/primitive_amount_status_res"
          description: |
            최소 통화 단위의 항목 금액입니다. 이 값이 적용되는 방법은 에 따라 다릅니다. `amountMode` 재산.
            
            `amountMode: declared` - OmniCart에 전달된 `amount` 값은 카트에 있는 이 `itemId`에 대한 총 금액입니다. `quantity` 및 `amountModifier` 값은 OmniCart에 저장되지만 최종 품목 가격 계산에는 무시됩니다.
            
            `amountMode:calculated` - `amount` 값이 항목별로 지정됩니다. 총 금액은 `quantity` 및 `amountModifier` 값을 기준으로 OmniCart 측에서 계산됩니다.

            자세한 내용은 다음을 참조하십시오. [금액](../concepts/amounts) 섹션을 참조하십시오.
        amountMode:
          $ref: "#/components/schemas/primitive_amountMode"
          description: |
            면 `amountMode` 로 설정됩니다. `calculated`, 이 값은 전달된 항목의 최종 가격에 영향을 줍니다. 에 설정된 품목 가격 `amount` 에 곱하기 `amountModifier` 그리고 `quantity`. 예를 들어 이 필드를 사용하여 할인을 정렬할 수 있습니다. FIX
        quantity:
          $ref: "#/components/schemas/primitive_quantity_status_res"
          description: |
            품목 수량. 부동 소수점(예: 우유 리터)이 될 수 있습니다. `amountMode` 설정에 따라 OmniCart에서 처리할 수 있습니다.
            `amountMode: declared` - `quantity` 값은 최종 가격 계산에서 무시되고 OmniCart에 저장됩니다.
            `amountMode: calculated` - 최종 가격은 OmniCart 측에서 `amount`에 `quantity`를 곱하여 계산됩니다.
          example: 1
        amountModifier:
          $ref: "#/components/schemas/primitive_amountModifier_status_res"
          description: |
            면 `amountMode` 로 설정됩니다. `calculated`, 이 값은 전달된 항목의 최종 가격에 영향을 줍니다. 에 설정된 품목 가격 `amount` 에 곱하기 `amountModifier` 그리고 `quantity`. 예를 들어 이 필드를 사용하여 할인을 정렬할 수 있습니다.
          example: 1
    primitive_triggerEvent:
      type: string
      title: " "
      nullable: true
      description: |
        타이머를 트리거하는 항목 지급 상태입니다.
        
        만약 당신이 통과하면 `null` value는 수동으로 시작해야 합니다. 자세한 내용은 다음을 참조하십시오. [아이템 타이머](../concepts/timer) 섹션을 참조하십시오.
      enum:
        - initiated
        - rejected
        - authorized
        - canceled
        - captured
        - completed
        - refunded
    object_timerSnapshot_status_res:
      type: object
      title: " "
      properties:
        triggerEvent:
          $ref: "#/components/schemas/primitive_paymentStatus_empty"
          description: |
            타이머를 트리거하는 항목 지급 상태입니다.
        
            만약 당신이 통과하면 `null` value는 수동으로 시작해야 합니다. 자세한 내용은 다음을 참조하십시오. [아이템 타이머](../concepts/timer) 섹션을 참조하십시오.
          enum:
            - initiated
            - canceled
            - rejected
            - authorized
            - captured
            - completed
            - refunded
            - manual
        timerStatus:
          $ref: "#/components/schemas/primitive_timerStatus"
          description: |
            현재 타이머 상태입니다.
        remainingSecs:
          $ref: "#/components/schemas/primitive_timerValue"          
          description: |
            타이머가 경과하기까지 남은 시간(초)입니다.
          example: 7200
    object_modifyAmount_modify_req:
      type: object
      title: " "
      description: |
        금액을 수정하기 위한 매개 변수 집합입니다.

        포획된 금액은 승인된 금액을 초과할 수 없습니다.
      properties:
        amountMode:
          $ref: "#/components/schemas/primitive_amountMode"
        amountModifier:
          $ref: "#/components/schemas/primitive_amountModifier"
    object_modifyAmount_modify_item_req:
      type: object
      title: " "
      description: |
        결과 양을 수정하기 위한 설정 집합입니다. 결과 금액은 승인된 금액을 초과할 수 없습니다. 자세한 내용은 다음을 참조하십시오. [항목 수정](../concepts/modify) 섹션을 참조하십시오.
      properties:
        amount:
          $ref: "#/components/schemas/primitive_amount"
          description: |
            최소 통화 단위의 항목 금액입니다. 이 값이 적용되는 방법은 에 따라 다릅니다. `amountMode` 재산.
            
            `amountMode: declared` - OmniCart에 전달된 `amount` 값은 카트에 있는 이 `itemId`에 대한 총 금액입니다. `quantity` 및 `amountModifier` 값은 OmniCart에 저장되지만 최종 품목 가격 계산에는 무시됩니다.
            
            `amountMode:calculated` - `amount` 값이 항목별로 지정됩니다. 총 금액은 `quantity` 및 `amountModifier` 값을 기준으로 OmniCart 측에서 계산됩니다.

            자세한 내용은 다음을 참조하십시오. [금액](../concepts/amounts) 섹션을 참조하십시오.
        amountMode:
          $ref: "#/components/schemas/primitive_amountMode_req"
        quantity:
          $ref: "#/components/schemas/primitive_quantity"
        amountModifier:
          $ref: "#/components/schemas/primitive_amountModifier"
          description: |
            면 `amountMode` 로 설정됩니다. `calculated`, 이 값은 전달된 항목의 최종 가격에 영향을 줍니다. 에 설정된 품목 가격 `amount` 에 곱하기 `amountModifier` 그리고 `quantity`. 예를 들어 이 필드를 사용하여 할인을 정렬할 수 있습니다.
    object_filterBox_req:
      type: object
      title: " "
      description: |
        요청 범위를 지정하기 위한 설정 블록입니다.
      properties:
        tags:
          $ref: "#/components/schemas/array_tags"
          description: |
            장바구니에 사용된 태그 목록입니다. 지정된 태그로 표시된 모든 항목은 요청의 영향을 받습니다.
        itemIds:
          $ref: "#/components/schemas/array_items"
          description: |
            특정 `itemIds` 카트의 일부인 패스. 지정된 모든 항목이 요청의 영향을 받습니다.
        timerEnabled:
          $ref: "#/components/schemas/primitive_timerEnabled"
          description: |
            이 속성이 정의되면 결과는 타이머 설정에 따라 다음 항목으로 좁혀집니다:
            
            `true` - 다른 기준을 충족하고 타이머가 활성화된 **항목만** 반환됩니다.
            
            `false` - 다른 기준을 충족하고 타이머가 비활성화된(설정되지 않음) **항목만** 반환됩니다.

            이 속성을 정의하지 않으면 타이머 상태에 관계없이 항목이 반환됩니다.
          example: false
    object_amountInfo_status_res:
      type: object
      title: " "
      description: |
        이 개체에는 요청 시 항목의 특정 상태별 금액에 대한 정보가 포함되어 있습니다.        
      properties:
        initiated:
          $ref: "#/components/schemas/primitive_fullInitiatedAmount"
          example: 36300
        captured:
          $ref: "#/components/schemas/primitive_fullCapturedAmount"
          example: 33000
        refunded:
          $ref: "#/components/schemas/primitive_fullRefundedAmount"
          example: 1100
        current:
          $ref: "#/components/schemas/primitive_fullCurrentAmount"
          example: 31900
    primitiveRes_timestamp:
      type: string
      title: " "
      format: date-time
      description: | 
        서버에서 요청을 받은 날짜 및 시간입니다.
      example: "2025-04-23T18:25:43.511Z"
    block_cart:
      type: array
      items:
        type: object
        required:
          - itemId
        properties:
          itemId:
            $ref: "#/components/schemas/object_item_init_req"
            description: |
              `itemId` 는 고유한 항목 아이디어 ifier의 자리 표시자입니다.
    primitive_timerStatus:
      type: string
      title: " "
      enum:
        - pending
        - started
        - paused
        - stopped
        - elapsed
    object_tags:
      type: array
      title: " "
      description: Array of item tags with their specific settings.
      items:
        type: object
        properties:
          tag:
            type: object
            title: " "
            description: |
              갈다 `tag` 를 사용하여 판매자 대시보드에 정의된 태그 이름을 사용합니다.
            properties:
              paymentBox:
                $ref: "#/components/schemas/object_paymentBox"
                description: |
                  결제 및 타이머 설정이 개체 이름으로 지정된 태그에 적용됩니다. 태그 설정은 카트 설정보다 우선합니다.
              enableTimer:
                $ref: "#/components/schemas/primitive_timerEnabled"
                description: |
                  타이머 활성화/비활성화:
                          
                  `true` - 타이머가 활성화되면 해당 설정을 구성할 수 있습니다.
                
                  `false` - 타이머가 비활성화되었습니다.
              timer:
                $ref: "#/components/schemas/object_timerSettings"
                description: 타이머 설정.
    array_debug:
      type: array
      title: " "
      description: |
        요청 관련 코드 및 해당 메시지의 배열입니다. 자세한 내용은 다음을 참조하십시오. [응답 코드 및 메시지](./response-codes) 섹션을 참조하십시오.
      items:
        type: object
        properties:
          code:
            $ref: "#/components/schemas/primitiveRes_code"
            description: |
              응답 코드입니다.
          message: 
            $ref: "#/components/schemas/primitiveRes_message"
            description: |
              응답 메시지.
    object_item_status_res:
      type: object
      title: " "
    object_item_init_req:
      type: object
      required:
        - amount
      properties:
        tag:
          $ref: "#/components/schemas/primitive_tag"
          description: |
            선택적 태그를 지정합니다. 태그는 판매자 대시보드에서 정의해야 합니다. 장바구니 항목당 하나의 태그가 허용됩니다.
        amount:
          $ref: "#/components/schemas/primitive_amount"
          description: |
            최소 통화 단위의 항목 금액입니다.
            
            `amountMode: declared` - OmniCart에 전달된 `amount` 값은 카트에 있는 이 `itemId`에 대한 총 금액입니다. `quantity` 및 `amountModifier` 값은 OmniCart에 저장되지만 최종 품목 가격 계산에는 무시됩니다.
            
            `amountMode:calculated` - `amount` 값이 항목별로 지정됩니다. 총 금액은 `quantity` 및 `amountModifier` 값을 기준으로 OmniCart 측에서 계산됩니다.
        quantity:
          $ref: "#/components/schemas/primitive_quantity"
          description: |
            품목 수량. 부동 소수점일 수 있습니다. (for example, litres of milk). 에 따라 `amountMode` 설정은 OmniCart에서 처리할 수 있습니다.
            `amountMode: declared` - the `quantity` value is ignored for the final price calculation and stored in OmniCart.
            `amountMode: calculated` -  the final price is calculated by multiplying `amount` by `quantity` on the OmniCart side.
        paymentBox:
          $ref: "#/components/schemas/object_paymentBox"
        enableTimer:
           $ref: "#/components/schemas/primitive_timerEnabled"
           description: |
             타이머 활성화/비활성화:
                               
             `true` - 타이머가 활성화되면 설정을 구성할 수 있습니다.
                        
             `false` - 타이머가 비활성화되었습니다.
        timer:
          $ref: "#/components/schemas/object_timerSettings"
          description: 타이머 설정.
      description: |
        `itemId`를 판매자 대시보드에서 사용할 수 있는 실제 항목 ID로 바꾸세요.
    object_scope:
      type: object
      properties:
        cart:
          type: object
          description: |
            카트 설정을 탭합니다.
          properties:
            paymentBox:
              $ref: "#/components/schemas/object_paymentBox"
              description: |
                결제 및 타이머 설정이 전체 장바구니에 적용되었습니다. 태그 설정을 정의하면 정의된 태그로 표시된 항목에 대한 카트 설정이 재정의됩니다.
            enableTimer:
              $ref: "#/components/schemas/primitive_timerEnabled"
              description: |
                타이머 활성화/비활성화:
                               
                `true` - 타이머가 활성화되면 설정을 구성할 수 있습니다.
                        
                `false` - 타이머가 비활성화되었습니다.
            timer:
              $ref: "#/components/schemas/object_timerSettings"
              description: 타이머 설정.
        tags:
          $ref: "#/components/schemas/object_tags"
          description: |
            항목 태그에 대한 지불 및 타이머 설정. 이 배열의 각 개체는 태그를 나타냅니다.
    object_timerSettings:
      type: object
      title: " "
      properties:
        triggerEvent:
          $ref: "#/components/schemas/primitive_paymentStatus_empty"
          description: |
            타이머를 트리거하는 항목 지급 상태입니다. 타이머를 수동으로 시작하도록 선택할 수도 있습니다. 자세한 내용은 다음을 참조하십시오. [아이템 타이머](../concepts/timer) 섹션을 참조하십시오.
          enum:
            - initiated
            - rejected
            - authorized
            - canceled
            - captured
            - completed
            - refunded
            - manual
        value:
          $ref: "#/components/schemas/primitive_timerValue"
          description: |
            타이머가 경과한 후의 시간(초)입니다.
    object_captureSettings:
      type: object
      title: " "
      properties:
        autoAction:
          $ref: "#/components/schemas/primitive_autoCaptureAction"
          description: |
            에 설정된 시간 이후에 수행된 작업 `value` 매개변수가 경과합니다.
        value:
          $ref: "#/components/schemas/primitive_timerValue"
          description: |
            작업이 설정된 후의 시간(초)입니다. `autoAction` 가 취해집니다.
          example: 172800
          minimum: 600
      description: Capture settings.
    primitive_cartExpiry:
        type: number
        title: " "
        example: 7200
        description: |
          체크 아웃 세션 만료 시간(초)입니다. 결제 세션 시간이 초과되면 고객은 결제를 완료할 수 없으며 모든 카트 항목의 상태가 다음으로 변경됩니다. `expired`.

          이 속성의 기본값과 이를 변경할 수 있는 권한은 OmniCart와의 계약에 따라 다릅니다.

          **충분한 권한이 있더라도 이 값을 변경하지 않는 것이 좋습니다.**
    primitive_currency:
      type: string
      title: " "
      example: XAU
      description: |
        [ISO 4217](https://www.iban.com/currency-codes) 알파벳 통화 코드.
    primitive_quantity_status_res:
        type: number
        title: " "
        format: float
        minimum: 0.01
    primitive_quantity:
      type: number
      title: " "
      format: float
      minimum: 0.01
      description: | 
        항목의 수량입니다. 정수 또는 소수일 수 있습니다.
        `amountMode`가 `calculated`로 설정되면 `amount` 값은 OmniCart 측의 `quantity` 값에 곱해집니다.
        면 `amountMode` 가 declared로 설정되면 `quantity` 값은 OmniCart에 저장되지만 결과 항목 가격에는 영향을 주지 않습니다.
    primitive_itemId:
      type: string
      title: " "
    primitive_capture:
      type: boolean
      title: " "
    block_modifyAmountTimer_req:
      type: object
      title: " "
      description: block_modifyAmountTimer_req description
      properties:
        modifyAmount:
          $ref: "#/components/schemas/object_modifyAmount_modify_req"
        modifyTimer:
          $ref: "#/components/schemas/object_modifyTimer_modify_req"
    object_totalAmounts_status_res:
      type: object
      properties:
        initiated:
          $ref: "#/components/schemas/primitive_totalInitiated"
          example: 36300
        captured:
          $ref: "#/components/schemas/primitive_totalCaptured"
          example: 33000
        refunded:
          $ref: "#/components/schemas/primitive_totalRefunded"
          example: 1100
        current:
          $ref: "#/components/schemas/primitive_totalCurrent"
          example: 31900
    object_modifyTimer_modify_req:
      type: object
      title: " "
      description: |
        타이머 매개 변수 집합입니다.
      properties:
        triggerEvent:
          $ref: "#/components/schemas/primitive_triggerEvent"
        manualAction:
          $ref: "#/components/schemas/primitive_timerManualAction"
        timerValue:
          $ref: "#/components/schemas/primitive_timerValue_req"
    object_paymentBox:
      type: object
      title: " "
      description: |
        결제 설정 집합입니다.
      properties:
        amountMode:
          $ref: "#/components/schemas/primitive_amountMode_req"
        amountModifier:
          $ref: "#/components/schemas/primitive_amountModifier"
          description: |
            면 `amountMode` 로 설정됩니다. `calculated`, 이 값은 전달된 항목의 최종 가격에 영향을 줍니다. 에 설정된 품목 가격 `amount` 에 곱하기 `amountModifier` 그리고 `quantity`. 예를 들어 이 필드를 사용하여 할인을 정렬할 수 있습니다.
        capture:
          $ref: "#/components/schemas/primitive_capture"
          description: |
            승인된 후 결제를 매입해야 하는지 여부 (고객이 지불을 확인한 후) 구매를 완료합니다.

            `true` - 카트에 권한이 부여되면 수동 캡처가 필요합니다. (충분한 권한이 있으면 자동 캡처도 구성할 수 있습니다);

            `false` - 카트가 승인되면 즉시 캡처됩니다.
        captureSettings:
          $ref: "#/components/schemas/object_captureSettings"
          description: 캡처 설정. 기본적으로 승인된 결제는 수동 작업 없이 2일(172800초) 후에 자동으로 취소됩니다.
    primitive_timerValue_req:
      type: integer
      title: " "
      description: |
        현재 남은 타이머 값(초)을 재정의할 수 있습니다. `0` 가치는 타이머가 무한하다는 것을 의미하며 일회성 구매에 사용할 수 있습니다.
    primitive_timerValue:
      type: integer
      title: " "
    primitive_amountModifier_status_res:
        type: number
        title: " "
        format: float
        minimum: 0.01
        example: 0.7
    primitive_amountModifier:
      type: number
      title: " "
      format: float
      minimum: 0.01
      example: 0.7
      description: |
        면 `amountMode` 로 설정됩니다. `calculated`, `amountModifier` value는 total item에 대한 승수 역할을 합니다. `amount`. 예를 들면 다음과 같습니다.
        
        비용이 100 XAU인 항목을 생각해 보십시오. 그러나 시간 제한 30% 할인이 있거나 고객이 개인적으로 30% 할인을 받을 수 있습니다. 이 항목의 경우 `amountModifier` value는 다음과 같이 설정해야 합니다. `0.7` (원래 가격의 70%이기 때문에).
        
        면 `amountMode` 로 설정됩니다. `declared`, `amountModifier` 값은 OmniCart에 저장되지만 결과 항목 가격에는 영향을 미치지 않습니다. 자세한 내용은 다음을 참조하십시오. [금액](../concepts/amounts) 섹션을 참조하십시오.
    primitive_customerId:
      type: string
      title: " "
      example: 8d7d8181-b4bf-49bb-b732-d498d15dc5cc
    primitive_cartId:
      type: string
      title: " "
      example: 6f891edb-1e1f-48bb-b042-2cb790a0f402
      minimum: 9
      maximum: 36
    primitive_cartId_param_path:
        type: string
        title: " "
        minimum: 9
        maximum: 36
  responses:
    "200_status":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
                description: 응답 매개변수.
                properties:
                  cartId:
                    $ref: "#/components/schemas/primitive_cartId"
                    description: |
                      `init` 요청과 함께 전달된 `cartId`.
                  customerId:
                    $ref: "#/components/schemas/primitive_customerId"
                    description: |
                      장바구니에 `customerId`가 할당되었습니다.
                  currency:
                    $ref: "#/components/schemas/primitive_currency"
                  totalAmounts:
                    $ref: "#/components/schemas/object_totalAmounts_status_res"
                    description: |
                      총 장바구니 금액입니다. 자세한 내용은 다음을 참조하십시오. [금액](../concepts/amounts) 섹션을 참조하십시오.
                  items:
                    type: array
                    description: |
                      반품된 품목.
                    items:
                      type: object
                      title: " "
                      properties:
                          itemId:
                            type: object
                            title: " "
                            properties:
                              paymentStatus:
                                $ref: "#/components/schemas/primitive_paymentStatus_full"
                                description: 현재 지불 상태.
                              itemAmounts:
                                $ref: "#/components/schemas/object_amountInfo_status_res"
                              tag:
                                $ref: "#/components/schemas/primitive_tag"
                                description: |
                                  항목이 표시된 태그입니다.
                              paymentSnapshot:
                                $ref: "#/components/schemas/object_paymentSnapshot_status_res"
                                description: |
                                  항목 금액에 대한 현재 정보입니다. 자세한 내용은 다음을 참조하십시오. [금액](../concepts/amounts) 섹션을 참조하십시오.
                              timerSnapshot:
                                $ref: "#/components/schemas/object_timerSnapshot_status_res"
                                description: |
                                  타이머 설정에 대한 현재 정보입니다. 자세한 내용은 다음을 참조하십시오. [아이템 타이머](../concepts/timer) 섹션을 참조하십시오.
              code:
                $ref: "#/components/schemas/primitiveRes_code_succes"
                description: |
                  오류 코드(자세한 내용은 [응답 코드 및 메시지](./response-codes#status)를 참조하세요).
                example: "001004"
              message:
                $ref: "#/components/schemas/primitiveRes_message_success"
                description: |
                  응답 메시지(자세한 내용은 [응답 코드 및 메시지](./response-codes#status)를 참조하세요).
                example: Requested cart does not contain tag(s) [...]
              debug:
                $ref: "#/components/schemas/array_debug"
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "201_init":
      description: Cart created
      content:
        application/json:
          schema:
            type: object
            required:
              - cartId
              - code
              - message
              - timestamp
            properties:
              cartId:
                $ref: "#/components/schemas/primitive_cartId"
                description: |
                  장바구니 식별자는 사용자 측에서 생성되어 카드 등록시 OmniCart에 전달됩니다.
              code:
                $ref: "#/components/schemas/primitiveRes_code_succes"
                description: |
                  오류 코드(자세한 내용은 [응답 코드 및 메시지](./response-codes#init)를 참조하세요).
              message:
                $ref: "#/components/schemas/primitiveRes_message_success"
                description: |
                  응답 메시지(자세한 내용은 [응답 코드 및 메시지](./response-codes#init)를 참조하세요).
              debug:
                $ref: "#/components/schemas/array_debug"
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "200_modify":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
                description: 응답 매개변수.
                properties:
                  modifiedAmounts:
                    type: array
                    title: " "
                    description: 수정된 금액이 포함된 itemId 배열
                    example: ["harpies", "minotaurs", "beholders"]
                  modifiedTimers:
                    type: array
                    title: " "
                    description: 수정된 타이머가 있는 itemId 배열
                    example: ["slow", "berserk", "bless"]
              code:
                $ref: "#/components/schemas/primitiveRes_code_succes"
                description: |
                  오류 코드(자세한 내용은 [응답 코드 및 메시지](./response-codes#modify)를 참조하세요).
              message:
                $ref: "#/components/schemas/primitiveRes_message_success"
                description: |
                  응답 메시지(자세한 내용은 [응답 코드 및 메시지](./response-codes#modify)를 참조하세요).
              debug:
                $ref: "#/components/schemas/array_debug"
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "200_capture":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
                properties:
                  itemIds:
                    $ref: "#/components/schemas/array_items"
                    description: 캡처된 itemId의 배열입니다.
              code:
                $ref: "#/components/schemas/primitiveRes_code_succes"
                description: |
                  오류 코드(자세한 내용은 [응답 코드 및 메시지](./response-codes#capture)를 참조하세요).
              message:
                $ref: "#/components/schemas/primitiveRes_message_success"
                description: |
                  응답 메시지(자세한 내용은 [응답 코드 및 메시지](./response-codes#capture)를 참조하세요).
              debug:
                $ref: "#/components/schemas/array_debug"
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "200_cancel":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
                properties:
                  itemIds:
                    $ref: "#/components/schemas/array_items"
                    description: 취소된 결제에 대한 itemId 배열입니다.
              code:
                $ref: "#/components/schemas/primitiveRes_code_succes"
                description: |
                  오류 코드(자세한 내용은 [응답 코드 및 메시지](./response-codes#capture)를 참조하세요).
                example: "000000"
              message:
                $ref: "#/components/schemas/primitiveRes_message_success"
                description: |
                  응답 메시지(자세한 내용은 [응답 코드 및 메시지](./response-codes#cancel)를 참조하세요).
                example: "Success"
              debug:
                $ref: "#/components/schemas/array_debug"
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "200_refund":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
                properties:
                  itemIds:
                    $ref: "#/components/schemas/array_items"
                    description: 환불된 품목 ID의 배열입니다.
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                description: |
                  오류 코드(자세한 내용은 [응답 코드 및 메시지](./response-codes#refund)를 참조하세요).
                example: "000000"
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                description: |
                  응답 메시지(자세한 내용은 [응답 코드 및 메시지](./response-codes#refund)를 참조하세요).
                example: "Success"
              debug:
                $ref: "#/components/schemas/array_debug"
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
#    "200":
#      description: OK
#      content:
#        application/json:
#          schema:
#            type: object
#            required:
#              - data
#              - code
#              - message
#              - timestamp
#            properties:
#              data:
#                $ref: "#/components/schemas/objectRes_data"
#              code:
#                $ref: "#/components/schemas/primitiveRes_code"
#              message:
#                $ref: "#/components/schemas/primitiveRes_message"
#              timestamp:
#                $ref: "#/components/schemas/primitiveRes_timestamp"
    "404":
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - debug
              - message
              - timestamp
            properties:
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                description: 오류 코드(자세한 내용은 [응답 코드 및 메시지](./response-codes)를 참조하세요).
                example: 199001
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                description: 응답 메시지(자세한 내용은 [응답 코드 및 메시지](./response-codes)를 참조하세요).
                example: Endpoint not found
              debug:
                $ref: "#/components/schemas/array_debug"
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "400_init":
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - debug
              - message
              - timestamp
            properties:
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                description: 오류 코드(자세한 내용은 [응답 코드 및 메시지](./response-codes#init)를 참조하세요).
                example: 123000
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                description: 응답 메시지(자세한 내용은 [응답 코드 및 메시지](./response-codes#init)를 참조하세요).
                example: Unknown currency
              debug:
                $ref: "#/components/schemas/array_debug"
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "400":
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - debug
              - message
              - timestamp
            properties:
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                description: 오류 코드(자세한 내용은 [응답 코드 및 메시지](./response-codes)를 참조하세요).
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                description: 응답 메시지(자세한 내용은 [응답 코드 및 메시지](./response-codes)를 참조하세요).
              debug:
                $ref: "#/components/schemas/array_debug"
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "400_status":
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                description: 오류 코드(자세한 내용은 [응답 코드 및 메시지](./response-codes#status)를 참조하세요).
                example: 121001
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                description: 응답 메시지(자세한 내용은 [응답 코드 및 메시지](./response-codes#status)를 참조하세요).
                example: cartId cannot be empty
              debug:
                $ref: "#/components/schemas/array_debug"
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - debug
              - message
              - timestamp
            properties:
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                description: 오류 코드(자세한 내용은 [응답 코드 및 메시지](./response-codes)를 참조하세요).
                example: 111000
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                description: 응답 메시지(자세한 내용은 [응답 코드 및 메시지](./response-codes)를 참조하세요).
                example: Authentication error
              debug:
                $ref: "#/components/schemas/array_debug"
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "500":
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - debug
              - message
              - timestamp
            properties:
              code:
                type: number
                title: " "
                description: |
                  오류 코드(자세한 내용은 [응답 코드 및 메시지](./response-codes)를 참조하세요).
                example: 199000
              message:
                type: string
                title: " "
                description: |
                  오류 메시지 (see [응답 코드 및 메시지](./response-codes) 자세한 내용은).
                example: General system error
              debug:
                $ref: "#/components/schemas/array_debug"
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
#      "503":
#        description: Service Unavailable
  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: Api-Access-Token
      description: "키 인증: 요청에는 요청 헤더에 유효한 `API_KEY`가 포함되어 있습니다."