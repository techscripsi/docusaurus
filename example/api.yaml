openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'https://virtserver.swaggerhub.com/TECHSCRIPSI/RuStore/1.0.0'
  - description: 'some'
    url: 'https://public-api.rustore.ru'
info:
  version: 1.0.0
  title: home-iot-api
  description: Автоматизируйте процессы обновлений и управления версиями через API.
paths:
  /public/auth/:
    post:
      summary: Метод получения токена авторизации
      tags: []
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    code: OK
                    message: null
                    body:
                      jwe: eyJlbmMiOiJBM......nuuM227D_O1A
                      ttl: 900
                    timestamp: '2023-08-11T13:31:17.580+03:00'
                required:
                  - code
                  - body
                  - timestamp
                properties:
                  code:
                    type: string
                    example: OK
                    description: Другое описание
                  message:
                    type: string
                    example: 'null'
                    description: <table><tr><th><code>message</code></th><th>Описание</th><th>Возможные действия</th></tr><tr><td><code>Range timestamp not valid</code></td><td>Параметр <code>timestamp</code> отличается более чем на 60 секунд.</td><td>Обновите <code>timestamp<code> и <code>signature</code>.</td></tr><tr><td><code>Range timestamp not valid</code></td><td>Параметр <code>timestamp</code> отличается более чем на 60 секунд.</td><td>Обновите <code>timestamp<code> и <code>signature</code>.</td></tr><tr><td><code>Range timestamp not valid</code></td><td>Параметр <code>timestamp</code> отличается более чем на 60 секунд.</td><td>Обновите <code>timestamp<code> и <code>signature</code>.</td></tr></table>
                    nullable: true
                  body:
                    type: object
                    required:
                      - jwe
                      - ttl
                    properties:
                      jwe:
                        type: string
                        example: eyJlbmMiOiJBM......nuuM227D_O1A
                      ttl:
                        type: integer
                        example: 900
                  timestamp:
                    type: string
                    example: '2022-07-08T13:24:41.8328711+03:00'
        '400':
          description: Неуспешный ответ
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    code: '400'
                    message: Range timestamp not valid
                required:
                  - code
                  - message
                properties:
                  code:
                    type: string
                    example: error
                    description: Код ответа.
                  message:
                    type: string
                    example: Range timestamp not valid
                    description: <table><tr><th><code>message</code></th><th>Описание</th><th>Возможные действия</th></tr><tr><td><code>Range timestamp not valid</code></td><td>Параметр <code>timestamp</code> отличается более чем на 60 секунд.</td><td>Обновите <code>timestamp<code> и <code>signature</code>.</td></tr><tr><td><code>Range timestamp not valid</code></td><td>Параметр <code>timestamp</code> отличается более чем на 60 секунд.</td><td>Обновите <code>timestamp<code> и <code>signature</code>.</td></tr><tr><td><code>Range timestamp not valid</code></td><td>Параметр <code>timestamp</code> отличается более чем на 60 секунд.</td><td>Обновите <code>timestamp<code> и <code>signature</code>.</td></tr></table>
      operationId: get-auth
      description: 'Метод позволяет сгенерировать JWE-токен с помощью приватного ключа, полученного в системе RuStore Консоль. Также метод проводит проверку активности владельца приложения.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - keyId
                - timestamp
                - signature
              properties:
                companyId:
                  type: string
                  x-stoplight:
                    id: 2gsutwe5auimt
                  description: '`id` компании.'
                  example: '123'
                  deprecated: true
                keyId:
                  type: string
                  x-stoplight:
                    id: c45jib4vzc15r
                  description: '`id` ключа.'
                  example: '20240926020918'
                timestamp:
                  type: string
                  x-stoplight:
                    id: cc79d1rd1g9no
                  example: '2022-07-08T13:24:41.8328711+03:00'
                  description: 'Время отправки запроса. Не должно отличаться от текущего серверного времени более, чем на 60 секунд.'
                signature:
                  type: string
                  x-stoplight:
                    id: ywwfs9x5a8c72
                  description: "RSA-подпись SHA-512 hash от строки, содержащей `timestamp` запроса. \r\n\r\nАлгоритм создания и проверки подписи: SHA512withRSA. \r\n\r\nНеобходимые действия для формирования signature: \r\n\r\n1. Cоздайте сообщение для подписи, конкатенируя идентификатор ключа `keyId` и текущую дату `timestamp`.\r\n  :::note ПРИМЕР\r\n  * `keyId`: `123`\r\n  * `timestamp`: `2024-06-18T11:49:08.290+03:00`\r\n  * Получившееся сообщение (итог конкатенации): `1232024-06-18T11:49:08.290+03:00`\r\n  :::\r\n1. Вычислите хэш сообщения из пункта выше с использованием алгоритма SHA-512, получите `9d864a0…………3d757f`.\r\n1. Полученный в [RuStore Консоль](https://console.rustore.ru/sign-in) закрытый ключ, который представлен в формате `Base64` декодируйте, чтобы получить приватный ключ RSA. \r\n1. Используйте его для создания цифровой подписи хэша из п.2.<\r\n1. Закодирйте подпись из п.3 в `Base64` для получения `signature`, получившийся итог `AkLM0pQM……….xw==` и есть параметр `signature`."
                  example: AkLM0pQM……….xw==
  /payment:
    post:
      summary: Payment Creation
      description: Use this method to send a payment request to QPay.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  format: int32
                  description: 'Payment amount in minimum currency units.'
                  example: '599'
                amountModifier:
                  type: number
                  format: float
                  description: 'The <code>amount</code> parameter is multiplied by this value. You can use it to calculate quantities or discounts.'
                  example: '0.9'
                currency:
                  type: string
                  description: '<a href="https://en.wikipedia.org/wiki/ISO_4217">ISO 4217</a> currency code.'
                  example: 'EUR'
                description:
                  type: string
                  description: 'Optional description.'
                  example: 'Online order.'
                language:
                  type: string
                  description: '<a href="https://localizely.com/iso-639-1-list/">ISO 639-1</a> language code.'
                  example: 'en'
                toConfirm:
                  type: boolean
                  description: 'Is it a two-step payment:<ul><li><code>true</code> — payment confirmation required;</li><li><code>false</code> — confirmation not required.</li></ul>'
                  example: true
                confirm:
                  type: object
                  description: 'Payment confirmation options.'
                  properties:
                    auto:
                      type: integer
                      description: 'Defines an auto action that is taken after the specified period passes:<br /><ul><li>negative values (e.g. <code>-1</code>, <code>-2</code>, etc.) — the payment expires automatically after the specified period if no confirmation request is sent;</li><li><code>positive values (e.g. <code>1</code>, <code>2</code>, etc.)</code> — the payment is completed automatically if no confirmation request is sent within the specified period.</li><li><code>0</code> — the payment must be confirmed manually, otherwise the default QPay gateway settings are applied: the payment request expires in <code>7</code> <code>days</code></li></ul><br /><b>Default value</b>: <code>0</code>.'
                      example: '48'
                    period:
                      type: string
                      description: 'Time period after which the action defined by the <code>auto</code> parameter (complete, expire, QPay defaults) is taken. Legal values:<br /><ul><li><code>minutes</code>;<li><code>hours</code>;</li><li><code>days</code>.</li></ul><br /><b>Default value</b>: not defined.'
                      example: 'hours'
                recurring:
                  type: object
                  description: 'Recurring payment options.'
                  properties:
                    type:
                      type: string
                      description: 'Whether this payment initiates a series of recurring payments or a regular recurring payment. Legal values:<br /><ul><li><code>init</code> — initial payment that starts recurring payments;</li><li><code>regular</li> — a regular recurring payment</code>.</ul>'
                    recurringId:
                      type: string
                      description: 'ID of a recurring payment scheme. If <code>type</code> is <code>init</code>, the request will return error as no ID is created yet.'
                      example: '20241022050222'
              required:
                - amount
                - currency
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    code: OK
                    message: null
                    timestamp: '2023-08-11T13:31:17.580+03:00'
                required:
                  - code
                  - timestamp

