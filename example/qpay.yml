openapi: '3.0.3'
info:
  title: OmniCart API
  version: 1.0.0
  description: API DESCRIPTION HERE.
servers:
  - url: https://virtserver.swaggerhub.com/TECHSCRIPSI/qpay/1.0.0
paths:
  /modify:
    patch:
      summary: modify order
      responses:
        "200":
          $ref: "#/components/responses/200"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
      operationId: modify
      requestBody:
        content:
          application/json:
            schema:
              type: object
  /status:
    post:
      summary: order status
      responses:
        "200":
          $ref: "#/components/responses/200"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
      operationId: status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - orderId
              properties:
                orderId:
                  $ref: "#/components/schemas/orderId"
                statusFilter:
                  type: object
                  description: statusFilter DESCRIPTION.
                  title: " "
                  properties:
                    tags:
                      type: array
                      title: " "
                      description: Your tags go here.
                      example: ["tag1", "tag2", "tag3"]
                    productIds:
                      type: array
                      title: " "
                      description: Your productIds go here.
                      example: ["productId1", "productId2", "productId3"]
                    expirable:
                      type: boolean
                      title: " "
                      description: Whether a timer is set for purchase. If not set, all orders will be returned
                      example: false
      security:
        - ApiKey: []
  /confirm:
    post:
      summary: confirm payment
      responses:
        "200":
          $ref: "#/components/responses/200"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
      operationId: confirm
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: confirm DESCRIPTION HERE.
              title: " "
              required:
                - orderId
              properties:
                orderId:
                  $ref: "#/components/schemas/orderId"
                statusFilter:
                  type: object
                  description: statusFilter DESCRIPTION.
                  title: " "
                  properties:
                    tags:
                      type: array
                      title: " "
                      description: Your tags go here.
                      example: ["tag1", "tag2", "tag3"]
                    productIds:
                      type: array
                      title: " "
                      description: Your productIds go here.
                      example: ["productId1", "productId2", "productId3"]
                    expirable:
                      type: boolean
                      title: " "
                      description: Whether a timer is set for purchase. If not set, all orders will be returned
                      example: false
      security:
        - ApiKey: []
  /cart:
    post:
      summary: make payment
      responses:
        "200":
          $ref: "#/components/responses/200"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
      operationId: makePayment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  $ref: "#/components/schemas/orderId"
                customerId:
                  $ref: "#/components/schemas/customerId"
                currency:
                  $ref: "#/components/schemas/currency"
                cart:
                  $ref: "#/components/schemas/cart"
                  description: Shoppign cartt.
                scope:
                  $ref: "#/components/schemas/scope"
      parameters: []
      security:
        - ApiKey: []
components:
  schemas:
#primitivesGen
    status:
      type: string
      title: " "
    tag:
      type: string
      example:
        - groceries
      description: your tag
    confirmAuto:
      enum:
        - cancel
        - complete
      type: string
      title: " "
      example:
        - complete
    amount:
      type: integer
      title: " "
      format: int32
      example:
        - 99.99
#primitivesReq
#primitivesRes
    codeRes:
      type: integer
      format: int32
      title: " "
    messageRes:
      type: string
      title: " "
    dataRes:
      type: object
      title: " "
    timestampRes:
      type: string
      format: date-time
      title: " "
#objectsGen
#objectsReq
#objectsRes
    cart:
      type: array
      items:
        type: object
        required:
          - item
        properties:
          item:
            $ref: "#/components/schemas/item"
    tags:
      type: array
      items:
        type: object
        properties:
          tagName:
            type: object
            properties:
              paymentFilter:
                $ref: "#/components/schemas/paymentFilter"
            description: These settings will be applied to the tag of your choice
        description: Tags payment settins
    item:
      type: object
      required:
        - amount
      properties:
        tag:
          $ref: "#/components/schemas/tag"
        amount:
          $ref: "#/components/schemas/amount"
        quantity:
          $ref: "#/components/schemas/quantity"
        productId:
          $ref: "#/components/schemas/productId"
        paymentFilter:
          $ref: "#/components/schemas/paymentFilter"
      description: product item
    scope:
      type: object
      properties:
        cart:
          $ref: "#/components/schemas/paymentFilter"
        tags:
          $ref: "#/components/schemas/tags"
      description: payment settings
    timer:
      type: object
      title: " "
      properties:
        value:
          $ref: "#/components/schemas/timerValue"
        period:
          $ref: "#/components/schemas/timerPeriod"
        triggerStatus:
          $ref: "#/components/schemas/status"
          description: Status that triggers the timer.
          enum:
            - paid
            - rejected
            - canceled
            - confirmed
            - refunded
      description: Customers will not be able to purchase this product until the timer times out
    confirm:
      type: object
      title: " "
      properties:
        auto:
          $ref: "#/components/schemas/confirmAuto"
        value:
          $ref: "#/components/schemas/confirmValue"
        period:
          $ref: "#/components/schemas/confirmPeriod"
      description: Confiramtion block
    currency:
      type: string
      title: " "
      example:
        - EUR
      description: "[ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code."
    language:
      type: string
      title: " "
      example:
        - en
      description: "[ISO 639-1](https://localizely.com/iso-639-1-list/) language code."
    quantity:
      type: number
      format: float
      minimum: 0.01
      example:
        - 1
      description: quantity of product
    productId:
      type: string
      title: " "
      example:
        - lv-426
      description: Product identifier.
    toConfirm:
      type: boolean
      title: " "
      description: Whether it's a two-step purchase.
    paymentFilter:
      type: object
      properties:
        toConfirm:
          $ref: "#/components/schemas/toConfirm"
        confirm:
          $ref: "#/components/schemas/confirm"
        enableTimer:
          $ref: "#/components/schemas/enableTimer"
        timer:
          $ref: "#/components/schemas/timer"
        amountModifier:
          $ref: "#/components/schemas/amountModifier"
      description: override box
    timerValue:
      type: number
      title: " "
      example:
        - 2
      description: Number of periods. `0` â€” infitite repeats. Effectively, this means
        a one time purchase.
    enableTimer:
      type: boolean
      title: " "
      description: set timer for order
    timerPeriod:
      enum:
        - minutes
        - hours
        - days
        - weeks
        - months
      type: string
      title: " "
      default: days
      example:
        - days
      description: set period
    confirmValue:
      type: integer
      title: " "
      format: int32
      example:
        - 2
      description: "20250114070902"
    confirmPeriod:
      enum:
        - minutes
        - hours
        - days
        - weeks
      type: string
      title: " "
      example:
        - days
      description: "20250114070900"
    amountModifier:
      type: number
      title: " "
      format: float
      minimum: 0.01
      example:
        - 0.7
      description: The `amount` parameter is multiplied by this value. You can use it
        to calculate discounts.'
    additionalParams:
      type: object
      description: Additional parameters you want to add to the order.
    customerId:
      type: string
      description: Requried for expirable purchases.
    orderId:
      type: string
      title: " "
      description: orderId must be unique
      example:
        - 6f891edb-1e1f-48bb-b042-2cb790a0f402
  responses:
    "200":
      description: The request was successful.
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/dataRes"
                description: Response parameters.
              code:
                $ref: "#/components/schemas/codeRes"
                description: Response code.
              message:
                $ref: "#/components/schemas/messageRes"
                description: Response message.
              timestamp:
                $ref: "#/components/schemas/timestampRes"
    "400":
      description: Bad Request.
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                type: object
              code:
                type: number
              message:
                type: string
              timestamp:
                type: string
                format: date-time
    "401":
      description: Unauthorized.
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                type: object
              code:
                type: number
              message:
                type: string
              timestamp:
                type: string
                format: date-time
    "500":
      description: Internal Server Error.
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                type: object
              code:
                type: number
              message:
                type: string
              timestamp:
                type: string
                format: date-time
  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: API_KEY
      description: "Key Auth: Requests contain a valid `API_KEY` in the request headers."
