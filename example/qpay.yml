openapi: '3.0.3'
info:
  title: OmniCart API
  version: 1.0.2
  description: API DESCRIPTION HERE.
servers:
  - url: https://virtserver.swaggerhub.com/TECHSCRIPSI/qpay/1.0.0
paths:
  /refund/{cartId}:
    post:
      summary: Refund
      description: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
      responses:
        "200":
          $ref: "#/components/responses/200_refund"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/primitive_cartId"
      operationId: 50refund
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: refund DESCRIPTION HERE.
              title: " "
              properties:
                statusFilter:
                  type: object
                  description: statusFilter DESCRIPTION.
                  title: " "
                  properties:
                    tags:
                      $ref: "#/components/schemas/array_tags"
                      description: Your tags go here.
                    itemIds:
                      $ref: "#/components/schemas/array_items"
                      description: Your itemIds go here.
                    timerEnabled:
                      $ref: "#/components/schemas/primitive_timerEnabled"
                      description: Whether a timer is set for purchase. If not set, all orders will be returned
                      example: false
  /cancel/{cartId}:
    post:
      summary: Cancel
      description: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
      responses:
        "200":
          $ref: "#/components/responses/200_cancel"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/primitive_cartId"
      operationId: 20cancel
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: cancel DESCRIPTION HERE.
              title: " "
              properties:
                tags:
                  $ref: "#/components/schemas/array_tags"
                items:
                  $ref: "#/components/schemas/array_items"
  /modify:
    patch:
      summary: Modify
      description: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
      responses:
        "200":
          $ref: "#/components/responses/200_modify"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
      operationId: 40modify
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cartId:
                  $ref: "#/components/schemas/primitive_cartId"
                customerId:
                  $ref: "#/components/schemas/primitive_customerId"
                modifyBox:
                  type: object
                  title: " "
                  properties:
                    scope:
                      type: object
                      title: " "
                      properties:
                        cart:
                          $ref: "#/components/schemas/block_modifyAmountTimer_req"
                        tags:
                          type: array
                          title: " "
                          properties:
                            tag:
                              $ref: "#/components/schemas/block_modifyAmountTimer_req"
                    items:
                      type: array
                      title: " "
                      description: items in modify
                      properties:
                        itemId:
                          type: object
                          title: " "
                          description: itemId in modify
                          properties:
                            modifyAmount:
                              $ref: "#/components/schemas/object_modifyAmount_modify_item_req"
                            modifyTimer:
                              $ref: "#/components/schemas/object_modifyTimer_modify_req"
  /status/{cartId}:
    get:
      summary: Retrieve status 
      description: |
        Use this method to retireve information for a previously created cart or specific items in that cart. You can use tags to narrow down search results.
      responses:
        "200":
          $ref: "#/components/responses/200_status"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
      operationId: 15status
      parameters:
        - name: cartId
          in: path
          description: |
            `cartId` used to initiate your cart.
          required: true
          schema:
            type: string
        - name: tags
          in: query
          description: |
            You can use tags that were passed with the cart to retrieve items marked with these tags.
          schema:
            type: array
        - name: itemIds
          in: query
          description: |
            You can retrieve specific item IDs.
          schema:
            type: array
        - name: timerEnabled
          in: query
          description: |
            If this option is defined, the result will include items based on their timer status:
            
            `true` - only items with enabled timer will be returned
            
            `false` - only item swithot timer will be returned

            If this option is not set, all items that meet other criteria will be returned.
          schema:
            type: boolean
#      requestBody:
#        content:
#          application/json:
#            schema:
#              type: object
#              properties:
#                statusFilter:
#                  type: object
#                  description: statusFilter DESCRIPTION.
#                  title: " "
#                  properties:
#                    tags:
#                      $ref: "#/components/schemas/array_tags"
#                      description: Your tags go here.
#                    itemIds:
#                      $ref: "#/components/schemas/array_items"
#                      description: Your itemIds go here.
#                    timerEnabled:
#                      $ref: "#/components/schemas/primitive_timerEnabled"
#                      description: Whether a timer is set for cart item. # If not set, all orders will be returned.
#                     example: false
      security:
        - ApiKey: []
  /capture:
    post:
      summary: Capture
      description: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
      responses:
        "200":
          $ref: "#/components/responses/200_capture"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
      operationId: 30capture
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: " "
              required:
                - cartId
              description: capture DESCRIPTION HERE.
              properties:
                cartId:
                  $ref: "#/components/schemas/primitive_cartId"
                statusFilter:
                  type: object
                  description: statusFilter DESCRIPTION.
                  title: " "
                  properties:
                    tags:
                      type: array
                      title: " "
                      description: Your tags go here.
                      example: ["tag1", "tag2", "tag3"]
                    itemIds:
                      type: array
                      title: " "
                      description: Your itemIds go here.
                      example: ["itemId1", "itemId2", "itemId3"]
                    timerEnabled:
                      type: boolean
                      title: " "
                      description: Whether a timer is set for purchase. If not set, all orders will be returned
                      example: false
      security:
        - ApiKey: []
  /init:
    post:
      summary: Initiate
      description: |
        Use this method to initiate a new cart. To do this, generate `cartId` (cart identifier) on your side and pass it to OmniCart along with other parameters.
      responses:
        "201":
          $ref: "#/components/responses/201_init"
        "400":
          $ref: "#/components/responses/400_init"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      operationId: 10init
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - cartId
              properties:
                cartId:
                  $ref: "#/components/schemas/primitive_cartId"
                  description: |
                    `cartId` is a unique identifier of your payment order that can contain one or more products (items). Generate `cartId` on your side and pass it to OmniCart on order creation.
                customerId:
                  $ref: "#/components/schemas/primitive_customerId"
                  description: |
                    Optional customer identifier that links them to the passed `cartId`. It is required only if you want to set timers for your items.
                currency:
                  $ref: "#/components/schemas/primitive_currency"
                scope:
                  $ref: "#/components/schemas/object_scope"
                  description: |
                    `scope` lets you define sets of settings that you can apply to the whole cart or items marked with specific tags. Child settings override parent ones. That means that if you define both cart and tag settings, the tag settings will override cart settins.
                cart:
                  $ref: "#/components/schemas/block_cart"
                  description: Cart contents.
      parameters: []
      security:
        - ApiKey: []
components:
  schemas:
    primitive_timerTrigger:
      type: string
      title: " "
      enum:
        - initiated
        - canceled
        - rejected
        - approved
        - captured
        - finalized
        - refunded
        - manual
    primitive_timerManualAction:
      type: string
      title: " "
      enum:
        - start
        - pause
        - stop
    primitive_timerEnabled:
      type: boolean
      title: " "
    primitive_paymentStatus_full:
      type: string
      title: " "
      enum:
        - initiated
        - canceled
        - rejected
        - approved
        - captured
        - finalized
        - refunded
    primitive_paymentStatus_empty:
      type: string
      title: " "
    primitive_tag:
      type: string
      title: " "
      example: groceries
    primitive_autoCaptureAction:
      type: string
      title: " "
      enum:
        - cancel
        - complete
      example: complete
    primitive_amountMode:
      type: string
      title: " "
      enum:
        - declared
        - calculated
      example: calculated
    array_tags:
      type: array
      title: " "
      example: ["tag1", "tag2", "tag3"]
    array_items:
      type: array
      title: " "
      example: ["item1", "item2", "item3"]
    primitive_amount:
      type: integer
      title: " "
      example: 9999
    primitiveRes_code_success:
      type: string
      title: " "
      description: "Response code (see also [Response codes and messages](/docusaurus/docs/integration/error-codes))."
      example: success
    primitiveRes_code:
      type: string
      title: " "
    primitiveRes_message:
      type: string
      description: Response message "(see also [Response codes and messages](/docusaurus/docs/integration/error-codes))."
      title: " "
    objectRes_data:
      type: object
      title: " "
    primitive_totalInitiated:
      type: integer
      title: " "
      description: Total initiated amount of the requested items in minimum currency units.
    primitive_totalCaptured:
      type: integer
      title: " "
      description: Total captured cart amount of the requested items amount in minimum currency units.
    primitive_totalRefunded:
      type: integer
      title: " "
      description: Total finalized cart amount of the requested items amount in minimum currency units.
    primitive_fullInitiatedAmount:
      type: integer
      title: " "
      description: Full initiated amount for the item in minimum currency units.
    primitive_fullCapturedAmount:
      type: integer
      title: " "
      description: Full captured amount for the item in minimum currency units.
    primitive_fullRefundedAmount:
      type: integer
      title: " "
      description: Full captured amount for the item in minimum currency units.
    object_paymentSnapshot_status_res:
      type: object
      title: " "
      properties:
        amountPerItem:
          $ref: "#/components/schemas/primitive_amount"
        quantity:
          $ref: "#/components/schemas/primitive_quantity"
        amountModifier:
          $ref: "#/components/schemas/primitive_amountModifier"
    object_timerSnapshot_status_res:
      type: object
      title: " "
      properties:
        triggerEvent:
          $ref: "#/components/schemas/primitive_paymentStatus_empty"
          enum:
            - initiated
            - canceled
            - rejected
            - approved
            - captured
            - finalized
            - refunded
            - manual
        timerStatus:
          $ref: "#/components/schemas/primitive_timerStatus"
        remainingSecs:
          $ref: "#/components/schemas/primitive_timerValue"
    object_modifyAmount_modify_req:
      type: object
      title: " "
      description: object_modifyAmount_modify_req description
      properties:
        amountMode:
          $ref: "#/components/schemas/primitive_amountMode"
        amountModifier:
          $ref: "#/components/schemas/primitive_amountModifier"
    object_modifyAmount_modify_item_req:
      type: object
      title: " "
      description: object_modifyAmount_modify_item_req description
      properties:
        amount:
          $ref: "#/components/schemas/primitive_amount"
        amountMode:
          $ref: "#/components/schemas/primitive_amountMode"
        quantity:
          $ref: "#/components/schemas/primitive_quantity"
        tag: 
          $ref: "#/components/schemas/primitive_tag"
        amountModifier:
          $ref: "#/components/schemas/primitive_amountModifier"
    object_amountInfo_status_res:
      type: object
      title: " "
      description: object_amountInfo_status_res.
      properties:
        initiated:
          $ref: "#/components/schemas/primitive_fullInitiatedAmount"
        captured:
          $ref: "#/components/schemas/primitive_fullCapturedAmount"
        refunded:
          $ref: "#/components/schemas/primitive_fullRefundedAmount"
    primitiveRes_timestamp:
      type: string
      title: " "
      format: date-time
      description: "Date and time the request was received by the server."
      example: "2025-04-23T18:25:43.511Z"
    block_cart:
      type: array
      items:
        type: object
        required:
          - itemId
        properties:
          itemId:
            $ref: "#/components/schemas/object_item_init_req"
    primitive_timerStatus:
      type: string
      title: ""
      enum:
        - pending
        - started
        - paused
        - stopped
        - elapsed
    object_tags:
      type: array
      title: " "
      description: Array of item tags with their specific settings.
      items:
        type: object
        properties:
          tagName:
            type: object
            title: " "
            description: |
              Replace `tagName` with a tag name defined in your merchant dashboard.
            properties:
              paymentFilter:
                $ref: "#/components/schemas/object_paymentFilter"
                description: |
                  Payment and timer settings applied to the tag specified as object name. Tag seettings override cart settings.
    object_item_status_res:
      type: object
      title: " "
    object_item_init_req:
      type: object
      required:
        - amount
      properties:
        tag:
          $ref: "#/components/schemas/primitive_tag"
          description: |
            Specify an optional tag. The tag must be defined in your merchant dashboard. One tag per cart item is allowed.
        amount:
          $ref: "#/components/schemas/primitive_amount"
          description: |
            Item amount in minimum currecy units.
            `amountMode: declared` - the `amount` value passed to OmniCart is the total amount for this `itemId` in the cart. The `quantity` and `amountModifier` values are stored in OminCart but ignored for final item price calculation.
            `amountMode: calculated` - the `amount` value is specified per item. The total amount is calculated on the OmniCart side based on the `quantity` and `amountModifier` values.
        quantity:
          $ref: "#/components/schemas/primitive_quantity"
          description: |
            Item quantity. Can be a floating point (for example, litres of milk). Depenging on the `amountMode` setting can be processed by OmniCart.
            `amountMode: declared` - the `quantity` value is ignored for the final price calculation and stored in OmniCart.
            `amountMode: calculated` -  the final price is calculated by multiplying `amount` by `quantity` on the OmniCart side.
        paymentFilter:
          $ref: "#/components/schemas/object_paymentFilter"
      description: Replace `itemId` with an actual item ID available in your merchant dashboard.
    object_scope:
      type: object
      properties:
        cart:
          $ref: "#/components/schemas/object_paymentFilter"
          description: |
            Payment and timer settings applied to the whole cart. If you define tag settings, they will override the cart settings for items marked with the defined tags.
        tags:
          $ref: "#/components/schemas/object_tags"
          description: |
            Payment and timer settings for item tags. Each object in this array represents a tag.
    object_timerSettings:
      type: object
      title: " "
      properties:
        triggerEvent:
          $ref: "#/components/schemas/primitive_paymentStatus_empty"
          description: |
            Item payment status that triggers the timer. You can also select to start the timer manually.
          enum:
            - initiated
            - rejected
            - approved
            - canceled
            - captured
            - finalized
            - refunded
            - manual
        value:
          $ref: "#/components/schemas/primitive_timerValue"
          description: Amount of seconds after which the timer elapses.
    object_captureSettings:
      type: object
      title: " "
      properties:
        autoAction:
          $ref: "#/components/schemas/primitive_autoCaptureAction"
          description: Action that is taken after the time set in the `value` parameter elsapses.
        value:
          $ref: "#/components/schemas/primitive_timerValue"
          description: Number of seconds after which the action set in the `autoAction` parameter is taken.
          example: 172800
      description: Capture settings.
    primitive_currency:
      type: string
      title: " "
      example: EUR
      description: "[ISO 4217](https://www.iban.com/currency-codes) alphabetic currency code."
#    primitive_language:
#      type: string
#      title: " "
#      example:
#        - en
#      description: "[ISO 639-1](https://localizely.com/iso-639-1-list/) language code."
    primitive_quantity:
      type: number
      title: " "
      format: float
      minimum: 0.01
      description: primitive_quantity
    primitive_itemId:
      type: string
      title: " "
    primitive_capture:
      type: boolean
      title: " "
    block_modifyAmountTimer_req:
      type: object
      title: " "
      description: block_modifyAmountTimer_req description
      properties:
        modifyAmount:
          $ref: "#/components/schemas/object_modifyAmount_modify_req"
        modifyTimer:
          $ref: "#/components/schemas/object_modifyTimer_modify_req"
    object_totalAmounts_status_res:
      type: object
      properties:
        initiated:
          $ref: "#/components/schemas/primitive_totalInitiated"
        captured:
          $ref: "#/components/schemas/primitive_totalCaptured"
        refunded:
          $ref: "#/components/schemas/primitive_totalRefunded"
    object_modifyTimer_modify_req:
      type: object
      title: " "
      description: object_modifyTimer description
      properties:
        triggerEvent:
          $ref: "#/components/schemas/primitive_timerTrigger"
        manualAction:
          $ref: "#/components/schemas/primitive_timerManualAction"
        timerValue:
          $ref: "#/components/schemas/primitive_timerValue"
    object_paymentFilter:
      type: object
      title: " "
      description: |
        Set of payment and timer settings.
      properties:
        amountMode:
          $ref: "#/components/schemas/primitive_amountMode"
          description: |
            This parameter defines what amoutn will be used for payment. Available values:
            * `declared` - for payment will be used the amount specified in the `amount` field of the item. Other fields (`quantity`, `amountModifier`) will be stored by OmniCart but will not affect the price. That is, in this case, the price is calculated on your side and passed to OmniCart as is.
            * `calculated` - the amount in the `amount` field is provided per item. If you pass the `quantity` and/or `amountModifier` fields along with the `amount` value, OmnicCart will calculate the final price based on the latter settings.
        amountModifier:
          $ref: "#/components/schemas/primitive_amountModifier"
          description: |
            If `amountMode` is set to `calculated`, this value affects the finale price for the passed item. The item price set in `amount` is multiplied by `amountModifier`. For example, you can use this field to arrange discounts.
        capture:
          $ref: "#/components/schemas/primitive_capture"
          description: |
            Whether an item affected by this setting is a two phase purchase. If enabled, after a payment of the item is approved, it is put on hold on the customer's account and must be captured for an actual transaction to take place.
        captureSettings:
          $ref: "#/components/schemas/object_captureSettings"
          description: Defines capture settings. By default, an approved payment auto expires after 2 days without manual action.
        enableTimer:
          $ref: "#/components/schemas/primitive_timerEnabled"
          description: Enable a timer is on, OmniCart will not register another purchase with the `itemId` for which the timer was enabled.
        timer:
          $ref: "#/components/schemas/object_timerSettings"
          desccription: Timer settings.
    primitive_timerValue:
      type: integer
      title: " "
    primitive_amountModifier:
      type: number
      title: " "
      format: float
      minimum: 0.01
      example: 0.7
      description: The `amount` parameter is multiplied by this value. You can use it
        to calculate discounts.
    primitive_customerId:
      type: string
      title: " "
      example: 8d7d8181-b4bf-49bb-b732-d498d15dc5cc
    primitive_cartId:
      type: string
      title: " "
      example: 6f891edb-1e1f-48bb-b042-2cb790a0f402
      minimum: 9
      maximum: 36
  responses:
    "200_status":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
                description: Response parameters.
                properties:
                  cartId:
                    $ref: "#/components/schemas/primitive_cartId"
                  customerId:
                    $ref: "#/components/schemas/primitive_customerId"
                  currency:
                    $ref: "#/components/schemas/primitive_currency"
                  totalAmounts:
                    $ref: "#/components/schemas/object_totalAmounts_status_res"
                  items:
                    type: array
                    items:
                      type: object
                      title: " "
                      properties:
                          itemId:
                            type: object
                            title: " "
                            properties:
                              paymentStatus:
                                $ref: "#/components/schemas/primitive_paymentStatus_full"
                              fullAmounts:
                                $ref: "#/components/schemas/object_amountInfo_status_res"
                              tag:
                                $ref: "#/components/schemas/primitive_tag"
                              paymentSnapshot:
                                $ref: "#/components/schemas/object_paymentSnapshot_status_res"
                              timerSnapshot:
                                $ref: "#/components/schemas/object_timerSnapshot_status_res"
              code:
                $ref: "#/components/schemas/primitiveRes_code"
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                example: Items statuses successfully retrieved
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "201_init":
      description: Cart created
      content:
        application/json:
          schema:
            type: object
            required:
              - cartId
              - code
              - message
              - timestamp
            properties:
              cartId:
                $ref: "#/components/schemas/primitive_cartId"
                desciption: |
                  Cart identifier generated on your side and passed to OmniCart on card registration.
              code:
                $ref: "#/components/schemas/primitiveRes_code_success"
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                example: "Cart successfully created."
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "200_modify":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
                description: Response parameters.
                properties:
                  modifiedAmounts:
                    type: array
                    title: " "
                    description: Array of itemIds with modified amount
                    example: ["itemId1", "itemId2", "itemId3"]
                  modifiedTimers:
                    type: array
                    title: " "
                    description: Array of itemIds with modified timer
                    example: ["itemId1", "itemId2", "itemId3"]
              code:
                $ref: "#/components/schemas/primitiveRes_code"
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                example: Items successfully modified
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "200_capture":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
                properties:
                  itemIds:
                    $ref: "#/components/schemas/array_items"
                    description: Array of captured itemIds.
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                description: |
                  Possible values:
                  * `items_captured` - selected items captured
                  * `cart_captured` - cart captured
                enum:
                  - items_captured
                  - cart_captured
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                example: Items successfully captured
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "200_cancel":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
                properties:
                  itemIds:
                    $ref: "#/components/schemas/array_items"
                    description: Array of itemIds with canceled payment.
              code:
                $ref: "#/components/schemas/primitiveRes_code_success"
                enum:
                  - cart_captured
                  - items_captured
              message:
                $ref: "#/components/schemas/primitiveRes_message"                
                example: Items successfully canceled
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "200_refund":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
                properties:
                  itemIds:
                    $ref: "#/components/schemas/array_items"
                    description: Array of refunded itemIds.
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                description: |
                  Possible values:
                  * `items_refunded` - selected items refunded
                  * `cart_refunded` - cart refunded
                enum:
                  - items_refunded
                  - cart_refunded
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                example: Items successfullry refunded
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "200":
      description: OK
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                $ref: "#/components/schemas/objectRes_data"
              code:
                $ref: "#/components/schemas/primitiveRes_code"
              message:
                $ref: "#/components/schemas/primitiveRes_message"
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "404_init":
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                type: object
              code:
                type: number
              message:
                type: string
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "404":
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                type: object
              code:
                type: number
              message:
                type: string
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "400_init":
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                type: object
              code:
                $ref: "#/components/schemas/primitiveRes_code"
                example: invalid_value
              message:
                $ref: "#/components/schemas/primitiveRes_message"
                example: Invalid cartId value
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "400":
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                type: object
              code:
                type: number
              message:
                type: string
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            required:
              - code
              - message
              - timestamp
            properties:
              code:
                type: number
                title: " "
                description: |
                  Error code "(see also [Response codes and messages](/docusaurus/docs/integration/error-codes))."
                example: auth_error
              message:
                type: string
                title: " "
                description: |
                  Error message "(see also [Response codes and messages](/docusaurus/docs/integration/error-codes))."
                example: Authentication error
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
    "500":
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            required:
              - data
              - code
              - message
              - timestamp
            properties:
              data:
                type: object
              code:
                type: number
              message:
                type: string
              timestamp:
                $ref: "#/components/schemas/primitiveRes_timestamp"
  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: Api-Access-Token
      description: "Key Auth: Requests contain a valid `API_KEY` in the request headers."
